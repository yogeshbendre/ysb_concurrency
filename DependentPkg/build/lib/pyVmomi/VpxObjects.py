# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******
from .VmomiSupport import CreateDataType, CreateManagedType
from .VmomiSupport import CreateEnumType
from .VmomiSupport import AddVersion, AddVersionParent
from .VmomiSupport import AddBreakingChangesInfo
from .VmomiSupport import F_LINK, F_LINKABLE
from .VmomiSupport import F_OPTIONAL, F_SECRET
from .VmomiSupport import newestVersions, stableVersions
from .VmomiSupport import publicVersions, dottedVersions
from .VmomiSupport import oldestVersions

AddVersion("vim.version.version10", "vim25", "6.0", 0, "vim25")
AddVersion("vim.version.version11", "vim25", "6.5", 0, "vim25")
AddVersion("vim.version.version12", "vim25", "6.7", 0, "vim25")
AddVersion("nfc.version.unstable", "nfc", "unstable", 0, "nfc")
AddVersion("vmodl.reflect.version.version2", "reflect", "2.0", 0, "reflect")
AddVersion("vmodl.reflect.version.version1", "reflect", "1.0", 0, "reflect")
AddVersion("vpx.version.version13", "vpxd3", "6.7.1", 0, "")
AddVersion("vpx.version.version10", "vpxd3", "6.0", 0, "")
AddVersion("vpx.version.version11", "vpxd3", "6.5", 0, "")
AddVersion("vpx.version.version12", "vpxd3", "6.7", 0, "")
AddVersion("vpx.version.m5", "vpxd3", "m5", 0, "")
AddVersion("nfc.version.version11", "nfc", "6.5", 0, "nfc")
AddVersion("nfc.version.version10", "nfc", "6.0", 0, "nfc")
AddVersion("vim.version.version13", "vim25", "6.7.1", 0, "vim25")
AddVersion("vim.version.unstable", "vim25", "unstable", 0, "vim25")
AddVersion("nfc.version.version12", "nfc", "6.7", 0, "nfc")
AddVersion("nfc.version.version13", "nfc", "6.7.1", 0, "nfc")
AddVersion("vim.version.version1", "vim2", "2.0", 0, "vim25")
AddVersion("vim.version.version2", "vim25", "2.5", 0, "vim25")
AddVersion("vim.version.version3", "vim25", "2.5u2", 0, "vim25")
AddVersion("vim.version.version4", "vim25", "2.5u2server", 0, "vim25")
AddVersion("vim.version.version5", "vim25", "4.0", 0, "vim25")
AddVersion("vim.version.version6", "vim25", "4.1", 0, "vim25")
AddVersion("vim.version.version7", "vim25", "5.0", 0, "vim25")
AddVersion("vim.version.version8", "vim25", "5.1", 0, "vim25")
AddVersion("vim.version.version9", "vim25", "5.5", 0, "vim25")
AddVersion("nfc.version.version3", "nfc", "3.0", 0, "nfc")
AddVersion("vmodl.version.version2", "", "", 0, "vim25")
AddVersion("nfc.version.version2", "nfc", "2.0", 0, "nfc")
AddVersion("vmodl.version.version1", "", "", 0, "vim25")
AddVersion("vmodl.version.version0", "", "", 0, "vim25")
AddVersion("nfc.version.version1", "nfc", "1.0", 0, "nfc")
AddVersion("vmodl.query.version.version1", "", "", 0, "vim25")
AddVersion("nfc.version.legacy", "nfc", "legacy", 0, "nfc")
AddVersion("vmodl.query.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version3", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version4", "", "", 0, "vim25")
AddVersion("vpx.version.legacy", "vpxd3", "legacy", 0, "")
AddVersion("vim.version.legacy", "vim25", "legacy", 0, "vim25")
AddVersion("vpx.version.version1", "vpxd3", "1.0", 0, "")
AddVersion("vim.version.m5", "vim25", "m5", 0, "vim25")
AddVersion("nfc.version.m5", "nfc", "m5", 0, "nfc")
AddVersion("vpx.version.version6", "vpxd3", "2.0", 0, "")
AddVersion("vpx.version.version7", "vpxd3", "3.0", 0, "")
AddVersion("vpx.version.version8", "vpxd3", "4.0", 0, "")
AddVersion("vpx.version.version9", "vpxd3", "5.5", 0, "")
AddVersion("vpx.version.stable", "vpxd3", "s3CD41", 0, "")
AddVersion("vpx.version.unstable", "vpxd3", "u301DE", 0, "")
AddVersion("nfc.version.stable", "nfc", "stable", 0, "nfc")
AddVersion("vim.version.stable", "vim25", "stable", 0, "vim25")
AddVersionParent("vim.version.version10", "vim.version.version10")
AddVersionParent("vim.version.version10", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version10", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version10", "vim.version.version1")
AddVersionParent("vim.version.version10", "vim.version.version2")
AddVersionParent("vim.version.version10", "vim.version.version3")
AddVersionParent("vim.version.version10", "vim.version.version4")
AddVersionParent("vim.version.version10", "vim.version.version5")
AddVersionParent("vim.version.version10", "vim.version.version6")
AddVersionParent("vim.version.version10", "vim.version.version7")
AddVersionParent("vim.version.version10", "vim.version.version8")
AddVersionParent("vim.version.version10", "vim.version.version9")
AddVersionParent("vim.version.version10", "vmodl.version.version2")
AddVersionParent("vim.version.version10", "vmodl.version.version1")
AddVersionParent("vim.version.version10", "vmodl.version.version0")
AddVersionParent("vim.version.version10", "vmodl.query.version.version1")
AddVersionParent("vim.version.version10", "vmodl.query.version.version2")
AddVersionParent("vim.version.version10", "vmodl.query.version.version3")
AddVersionParent("vim.version.version10", "vmodl.query.version.version4")
AddVersionParent("vim.version.version11", "vim.version.version10")
AddVersionParent("vim.version.version11", "vim.version.version11")
AddVersionParent("vim.version.version11", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version11", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version11", "vim.version.version1")
AddVersionParent("vim.version.version11", "vim.version.version2")
AddVersionParent("vim.version.version11", "vim.version.version3")
AddVersionParent("vim.version.version11", "vim.version.version4")
AddVersionParent("vim.version.version11", "vim.version.version5")
AddVersionParent("vim.version.version11", "vim.version.version6")
AddVersionParent("vim.version.version11", "vim.version.version7")
AddVersionParent("vim.version.version11", "vim.version.version8")
AddVersionParent("vim.version.version11", "vim.version.version9")
AddVersionParent("vim.version.version11", "vmodl.version.version2")
AddVersionParent("vim.version.version11", "vmodl.version.version1")
AddVersionParent("vim.version.version11", "vmodl.version.version0")
AddVersionParent("vim.version.version11", "vmodl.query.version.version1")
AddVersionParent("vim.version.version11", "vmodl.query.version.version2")
AddVersionParent("vim.version.version11", "vmodl.query.version.version3")
AddVersionParent("vim.version.version11", "vmodl.query.version.version4")
AddVersionParent("vim.version.version12", "vim.version.version10")
AddVersionParent("vim.version.version12", "vim.version.version11")
AddVersionParent("vim.version.version12", "vim.version.version12")
AddVersionParent("vim.version.version12", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version12", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version12", "vim.version.version1")
AddVersionParent("vim.version.version12", "vim.version.version2")
AddVersionParent("vim.version.version12", "vim.version.version3")
AddVersionParent("vim.version.version12", "vim.version.version4")
AddVersionParent("vim.version.version12", "vim.version.version5")
AddVersionParent("vim.version.version12", "vim.version.version6")
AddVersionParent("vim.version.version12", "vim.version.version7")
AddVersionParent("vim.version.version12", "vim.version.version8")
AddVersionParent("vim.version.version12", "vim.version.version9")
AddVersionParent("vim.version.version12", "vmodl.version.version2")
AddVersionParent("vim.version.version12", "vmodl.version.version1")
AddVersionParent("vim.version.version12", "vmodl.version.version0")
AddVersionParent("vim.version.version12", "vmodl.query.version.version1")
AddVersionParent("vim.version.version12", "vmodl.query.version.version2")
AddVersionParent("vim.version.version12", "vmodl.query.version.version3")
AddVersionParent("vim.version.version12", "vmodl.query.version.version4")
AddVersionParent("nfc.version.unstable", "vim.version.version10")
AddVersionParent("nfc.version.unstable", "vim.version.version11")
AddVersionParent("nfc.version.unstable", "vim.version.version12")
AddVersionParent("nfc.version.unstable", "nfc.version.unstable")
AddVersionParent("nfc.version.unstable", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.unstable", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.unstable", "nfc.version.version11")
AddVersionParent("nfc.version.unstable", "nfc.version.version10")
AddVersionParent("nfc.version.unstable", "vim.version.version13")
AddVersionParent("nfc.version.unstable", "vim.version.unstable")
AddVersionParent("nfc.version.unstable", "nfc.version.version12")
AddVersionParent("nfc.version.unstable", "nfc.version.version13")
AddVersionParent("nfc.version.unstable", "vim.version.version1")
AddVersionParent("nfc.version.unstable", "vim.version.version2")
AddVersionParent("nfc.version.unstable", "vim.version.version3")
AddVersionParent("nfc.version.unstable", "vim.version.version4")
AddVersionParent("nfc.version.unstable", "vim.version.version5")
AddVersionParent("nfc.version.unstable", "vim.version.version6")
AddVersionParent("nfc.version.unstable", "vim.version.version7")
AddVersionParent("nfc.version.unstable", "vim.version.version8")
AddVersionParent("nfc.version.unstable", "vim.version.version9")
AddVersionParent("nfc.version.unstable", "nfc.version.version3")
AddVersionParent("nfc.version.unstable", "vmodl.version.version2")
AddVersionParent("nfc.version.unstable", "nfc.version.version2")
AddVersionParent("nfc.version.unstable", "vmodl.version.version1")
AddVersionParent("nfc.version.unstable", "vmodl.version.version0")
AddVersionParent("nfc.version.unstable", "nfc.version.version1")
AddVersionParent("nfc.version.unstable", "vmodl.query.version.version1")
AddVersionParent("nfc.version.unstable", "vmodl.query.version.version2")
AddVersionParent("nfc.version.unstable", "vmodl.query.version.version3")
AddVersionParent("nfc.version.unstable", "vmodl.query.version.version4")
AddVersionParent("nfc.version.unstable", "vim.version.m5")
AddVersionParent("nfc.version.unstable", "nfc.version.m5")
AddVersionParent("nfc.version.unstable", "nfc.version.stable")
AddVersionParent("nfc.version.unstable", "vim.version.stable")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.reflect.version.version2")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.reflect.version.version1")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version0")
AddVersionParent("vpx.version.version13", "vim.version.version10")
AddVersionParent("vpx.version.version13", "vim.version.version11")
AddVersionParent("vpx.version.version13", "vim.version.version12")
AddVersionParent("vpx.version.version13", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.version13", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version13", "vpx.version.version13")
AddVersionParent("vpx.version.version13", "vpx.version.version10")
AddVersionParent("vpx.version.version13", "vpx.version.version11")
AddVersionParent("vpx.version.version13", "vpx.version.version12")
AddVersionParent("vpx.version.version13", "nfc.version.version11")
AddVersionParent("vpx.version.version13", "nfc.version.version10")
AddVersionParent("vpx.version.version13", "vim.version.version13")
AddVersionParent("vpx.version.version13", "nfc.version.version12")
AddVersionParent("vpx.version.version13", "nfc.version.version13")
AddVersionParent("vpx.version.version13", "vim.version.version1")
AddVersionParent("vpx.version.version13", "vim.version.version2")
AddVersionParent("vpx.version.version13", "vim.version.version3")
AddVersionParent("vpx.version.version13", "vim.version.version4")
AddVersionParent("vpx.version.version13", "vim.version.version5")
AddVersionParent("vpx.version.version13", "vim.version.version6")
AddVersionParent("vpx.version.version13", "vim.version.version7")
AddVersionParent("vpx.version.version13", "vim.version.version8")
AddVersionParent("vpx.version.version13", "vim.version.version9")
AddVersionParent("vpx.version.version13", "nfc.version.version3")
AddVersionParent("vpx.version.version13", "vmodl.version.version2")
AddVersionParent("vpx.version.version13", "nfc.version.version2")
AddVersionParent("vpx.version.version13", "vmodl.version.version1")
AddVersionParent("vpx.version.version13", "vmodl.version.version0")
AddVersionParent("vpx.version.version13", "nfc.version.version1")
AddVersionParent("vpx.version.version13", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version13", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version13", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version13", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version13", "vpx.version.version1")
AddVersionParent("vpx.version.version13", "vpx.version.version6")
AddVersionParent("vpx.version.version13", "vpx.version.version7")
AddVersionParent("vpx.version.version13", "vpx.version.version8")
AddVersionParent("vpx.version.version13", "vpx.version.version9")
AddVersionParent("vpx.version.version10", "vim.version.version10")
AddVersionParent("vpx.version.version10", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.version10", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version10", "vpx.version.version10")
AddVersionParent("vpx.version.version10", "nfc.version.version10")
AddVersionParent("vpx.version.version10", "vim.version.version1")
AddVersionParent("vpx.version.version10", "vim.version.version2")
AddVersionParent("vpx.version.version10", "vim.version.version3")
AddVersionParent("vpx.version.version10", "vim.version.version4")
AddVersionParent("vpx.version.version10", "vim.version.version5")
AddVersionParent("vpx.version.version10", "vim.version.version6")
AddVersionParent("vpx.version.version10", "vim.version.version7")
AddVersionParent("vpx.version.version10", "vim.version.version8")
AddVersionParent("vpx.version.version10", "vim.version.version9")
AddVersionParent("vpx.version.version10", "nfc.version.version3")
AddVersionParent("vpx.version.version10", "vmodl.version.version2")
AddVersionParent("vpx.version.version10", "nfc.version.version2")
AddVersionParent("vpx.version.version10", "vmodl.version.version1")
AddVersionParent("vpx.version.version10", "vmodl.version.version0")
AddVersionParent("vpx.version.version10", "nfc.version.version1")
AddVersionParent("vpx.version.version10", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version10", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version10", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version10", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version10", "vpx.version.version1")
AddVersionParent("vpx.version.version10", "vpx.version.version6")
AddVersionParent("vpx.version.version10", "vpx.version.version7")
AddVersionParent("vpx.version.version10", "vpx.version.version8")
AddVersionParent("vpx.version.version10", "vpx.version.version9")
AddVersionParent("vpx.version.version11", "vim.version.version10")
AddVersionParent("vpx.version.version11", "vim.version.version11")
AddVersionParent("vpx.version.version11", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.version11", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version11", "vpx.version.version10")
AddVersionParent("vpx.version.version11", "vpx.version.version11")
AddVersionParent("vpx.version.version11", "nfc.version.version11")
AddVersionParent("vpx.version.version11", "nfc.version.version10")
AddVersionParent("vpx.version.version11", "vim.version.version1")
AddVersionParent("vpx.version.version11", "vim.version.version2")
AddVersionParent("vpx.version.version11", "vim.version.version3")
AddVersionParent("vpx.version.version11", "vim.version.version4")
AddVersionParent("vpx.version.version11", "vim.version.version5")
AddVersionParent("vpx.version.version11", "vim.version.version6")
AddVersionParent("vpx.version.version11", "vim.version.version7")
AddVersionParent("vpx.version.version11", "vim.version.version8")
AddVersionParent("vpx.version.version11", "vim.version.version9")
AddVersionParent("vpx.version.version11", "nfc.version.version3")
AddVersionParent("vpx.version.version11", "vmodl.version.version2")
AddVersionParent("vpx.version.version11", "nfc.version.version2")
AddVersionParent("vpx.version.version11", "vmodl.version.version1")
AddVersionParent("vpx.version.version11", "vmodl.version.version0")
AddVersionParent("vpx.version.version11", "nfc.version.version1")
AddVersionParent("vpx.version.version11", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version11", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version11", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version11", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version11", "vpx.version.version1")
AddVersionParent("vpx.version.version11", "vpx.version.version6")
AddVersionParent("vpx.version.version11", "vpx.version.version7")
AddVersionParent("vpx.version.version11", "vpx.version.version8")
AddVersionParent("vpx.version.version11", "vpx.version.version9")
AddVersionParent("vpx.version.version12", "vim.version.version10")
AddVersionParent("vpx.version.version12", "vim.version.version11")
AddVersionParent("vpx.version.version12", "vim.version.version12")
AddVersionParent("vpx.version.version12", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.version12", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version12", "vpx.version.version10")
AddVersionParent("vpx.version.version12", "vpx.version.version11")
AddVersionParent("vpx.version.version12", "vpx.version.version12")
AddVersionParent("vpx.version.version12", "nfc.version.version11")
AddVersionParent("vpx.version.version12", "nfc.version.version10")
AddVersionParent("vpx.version.version12", "nfc.version.version12")
AddVersionParent("vpx.version.version12", "vim.version.version1")
AddVersionParent("vpx.version.version12", "vim.version.version2")
AddVersionParent("vpx.version.version12", "vim.version.version3")
AddVersionParent("vpx.version.version12", "vim.version.version4")
AddVersionParent("vpx.version.version12", "vim.version.version5")
AddVersionParent("vpx.version.version12", "vim.version.version6")
AddVersionParent("vpx.version.version12", "vim.version.version7")
AddVersionParent("vpx.version.version12", "vim.version.version8")
AddVersionParent("vpx.version.version12", "vim.version.version9")
AddVersionParent("vpx.version.version12", "nfc.version.version3")
AddVersionParent("vpx.version.version12", "vmodl.version.version2")
AddVersionParent("vpx.version.version12", "nfc.version.version2")
AddVersionParent("vpx.version.version12", "vmodl.version.version1")
AddVersionParent("vpx.version.version12", "vmodl.version.version0")
AddVersionParent("vpx.version.version12", "nfc.version.version1")
AddVersionParent("vpx.version.version12", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version12", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version12", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version12", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version12", "vpx.version.version1")
AddVersionParent("vpx.version.version12", "vpx.version.version6")
AddVersionParent("vpx.version.version12", "vpx.version.version7")
AddVersionParent("vpx.version.version12", "vpx.version.version8")
AddVersionParent("vpx.version.version12", "vpx.version.version9")
AddVersionParent("vpx.version.m5", "vim.version.version10")
AddVersionParent("vpx.version.m5", "vim.version.version11")
AddVersionParent("vpx.version.m5", "vim.version.version12")
AddVersionParent("vpx.version.m5", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.m5", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.m5", "vpx.version.version13")
AddVersionParent("vpx.version.m5", "vpx.version.version10")
AddVersionParent("vpx.version.m5", "vpx.version.version11")
AddVersionParent("vpx.version.m5", "vpx.version.version12")
AddVersionParent("vpx.version.m5", "vpx.version.m5")
AddVersionParent("vpx.version.m5", "nfc.version.version11")
AddVersionParent("vpx.version.m5", "nfc.version.version10")
AddVersionParent("vpx.version.m5", "vim.version.version13")
AddVersionParent("vpx.version.m5", "nfc.version.version12")
AddVersionParent("vpx.version.m5", "nfc.version.version13")
AddVersionParent("vpx.version.m5", "vim.version.version1")
AddVersionParent("vpx.version.m5", "vim.version.version2")
AddVersionParent("vpx.version.m5", "vim.version.version3")
AddVersionParent("vpx.version.m5", "vim.version.version4")
AddVersionParent("vpx.version.m5", "vim.version.version5")
AddVersionParent("vpx.version.m5", "vim.version.version6")
AddVersionParent("vpx.version.m5", "vim.version.version7")
AddVersionParent("vpx.version.m5", "vim.version.version8")
AddVersionParent("vpx.version.m5", "vim.version.version9")
AddVersionParent("vpx.version.m5", "nfc.version.version3")
AddVersionParent("vpx.version.m5", "vmodl.version.version2")
AddVersionParent("vpx.version.m5", "nfc.version.version2")
AddVersionParent("vpx.version.m5", "vmodl.version.version1")
AddVersionParent("vpx.version.m5", "vmodl.version.version0")
AddVersionParent("vpx.version.m5", "nfc.version.version1")
AddVersionParent("vpx.version.m5", "vmodl.query.version.version1")
AddVersionParent("vpx.version.m5", "vmodl.query.version.version2")
AddVersionParent("vpx.version.m5", "vmodl.query.version.version3")
AddVersionParent("vpx.version.m5", "vmodl.query.version.version4")
AddVersionParent("vpx.version.m5", "vpx.version.version1")
AddVersionParent("vpx.version.m5", "vim.version.m5")
AddVersionParent("vpx.version.m5", "nfc.version.m5")
AddVersionParent("vpx.version.m5", "vpx.version.version6")
AddVersionParent("vpx.version.m5", "vpx.version.version7")
AddVersionParent("vpx.version.m5", "vpx.version.version8")
AddVersionParent("vpx.version.m5", "vpx.version.version9")
AddVersionParent("nfc.version.version11", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.version11", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.version11", "nfc.version.version11")
AddVersionParent("nfc.version.version11", "nfc.version.version10")
AddVersionParent("nfc.version.version11", "vim.version.version1")
AddVersionParent("nfc.version.version11", "nfc.version.version3")
AddVersionParent("nfc.version.version11", "vmodl.version.version2")
AddVersionParent("nfc.version.version11", "nfc.version.version2")
AddVersionParent("nfc.version.version11", "vmodl.version.version1")
AddVersionParent("nfc.version.version11", "vmodl.version.version0")
AddVersionParent("nfc.version.version11", "nfc.version.version1")
AddVersionParent("nfc.version.version11", "vmodl.query.version.version1")
AddVersionParent("nfc.version.version10", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.version10", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.version10", "nfc.version.version10")
AddVersionParent("nfc.version.version10", "vim.version.version1")
AddVersionParent("nfc.version.version10", "nfc.version.version3")
AddVersionParent("nfc.version.version10", "vmodl.version.version2")
AddVersionParent("nfc.version.version10", "nfc.version.version2")
AddVersionParent("nfc.version.version10", "vmodl.version.version1")
AddVersionParent("nfc.version.version10", "vmodl.version.version0")
AddVersionParent("nfc.version.version10", "nfc.version.version1")
AddVersionParent("nfc.version.version10", "vmodl.query.version.version1")
AddVersionParent("vim.version.version13", "vim.version.version10")
AddVersionParent("vim.version.version13", "vim.version.version11")
AddVersionParent("vim.version.version13", "vim.version.version12")
AddVersionParent("vim.version.version13", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version13", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version13", "vim.version.version13")
AddVersionParent("vim.version.version13", "vim.version.version1")
AddVersionParent("vim.version.version13", "vim.version.version2")
AddVersionParent("vim.version.version13", "vim.version.version3")
AddVersionParent("vim.version.version13", "vim.version.version4")
AddVersionParent("vim.version.version13", "vim.version.version5")
AddVersionParent("vim.version.version13", "vim.version.version6")
AddVersionParent("vim.version.version13", "vim.version.version7")
AddVersionParent("vim.version.version13", "vim.version.version8")
AddVersionParent("vim.version.version13", "vim.version.version9")
AddVersionParent("vim.version.version13", "vmodl.version.version2")
AddVersionParent("vim.version.version13", "vmodl.version.version1")
AddVersionParent("vim.version.version13", "vmodl.version.version0")
AddVersionParent("vim.version.version13", "vmodl.query.version.version1")
AddVersionParent("vim.version.version13", "vmodl.query.version.version2")
AddVersionParent("vim.version.version13", "vmodl.query.version.version3")
AddVersionParent("vim.version.version13", "vmodl.query.version.version4")
AddVersionParent("vim.version.unstable", "vim.version.version10")
AddVersionParent("vim.version.unstable", "vim.version.version11")
AddVersionParent("vim.version.unstable", "vim.version.version12")
AddVersionParent("vim.version.unstable", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.unstable", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.unstable", "vim.version.version13")
AddVersionParent("vim.version.unstable", "vim.version.unstable")
AddVersionParent("vim.version.unstable", "vim.version.version1")
AddVersionParent("vim.version.unstable", "vim.version.version2")
AddVersionParent("vim.version.unstable", "vim.version.version3")
AddVersionParent("vim.version.unstable", "vim.version.version4")
AddVersionParent("vim.version.unstable", "vim.version.version5")
AddVersionParent("vim.version.unstable", "vim.version.version6")
AddVersionParent("vim.version.unstable", "vim.version.version7")
AddVersionParent("vim.version.unstable", "vim.version.version8")
AddVersionParent("vim.version.unstable", "vim.version.version9")
AddVersionParent("vim.version.unstable", "vmodl.version.version2")
AddVersionParent("vim.version.unstable", "vmodl.version.version1")
AddVersionParent("vim.version.unstable", "vmodl.version.version0")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version1")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version2")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version3")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version4")
AddVersionParent("vim.version.unstable", "vim.version.m5")
AddVersionParent("vim.version.unstable", "vim.version.stable")
AddVersionParent("nfc.version.version12", "vim.version.version10")
AddVersionParent("nfc.version.version12", "vim.version.version11")
AddVersionParent("nfc.version.version12", "vim.version.version12")
AddVersionParent("nfc.version.version12", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.version12", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.version12", "nfc.version.version11")
AddVersionParent("nfc.version.version12", "nfc.version.version10")
AddVersionParent("nfc.version.version12", "nfc.version.version12")
AddVersionParent("nfc.version.version12", "vim.version.version1")
AddVersionParent("nfc.version.version12", "vim.version.version2")
AddVersionParent("nfc.version.version12", "vim.version.version3")
AddVersionParent("nfc.version.version12", "vim.version.version4")
AddVersionParent("nfc.version.version12", "vim.version.version5")
AddVersionParent("nfc.version.version12", "vim.version.version6")
AddVersionParent("nfc.version.version12", "vim.version.version7")
AddVersionParent("nfc.version.version12", "vim.version.version8")
AddVersionParent("nfc.version.version12", "vim.version.version9")
AddVersionParent("nfc.version.version12", "nfc.version.version3")
AddVersionParent("nfc.version.version12", "vmodl.version.version2")
AddVersionParent("nfc.version.version12", "nfc.version.version2")
AddVersionParent("nfc.version.version12", "vmodl.version.version1")
AddVersionParent("nfc.version.version12", "vmodl.version.version0")
AddVersionParent("nfc.version.version12", "nfc.version.version1")
AddVersionParent("nfc.version.version12", "vmodl.query.version.version1")
AddVersionParent("nfc.version.version12", "vmodl.query.version.version2")
AddVersionParent("nfc.version.version12", "vmodl.query.version.version3")
AddVersionParent("nfc.version.version12", "vmodl.query.version.version4")
AddVersionParent("nfc.version.version13", "vim.version.version10")
AddVersionParent("nfc.version.version13", "vim.version.version11")
AddVersionParent("nfc.version.version13", "vim.version.version12")
AddVersionParent("nfc.version.version13", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.version13", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.version13", "nfc.version.version11")
AddVersionParent("nfc.version.version13", "nfc.version.version10")
AddVersionParent("nfc.version.version13", "vim.version.version13")
AddVersionParent("nfc.version.version13", "nfc.version.version12")
AddVersionParent("nfc.version.version13", "nfc.version.version13")
AddVersionParent("nfc.version.version13", "vim.version.version1")
AddVersionParent("nfc.version.version13", "vim.version.version2")
AddVersionParent("nfc.version.version13", "vim.version.version3")
AddVersionParent("nfc.version.version13", "vim.version.version4")
AddVersionParent("nfc.version.version13", "vim.version.version5")
AddVersionParent("nfc.version.version13", "vim.version.version6")
AddVersionParent("nfc.version.version13", "vim.version.version7")
AddVersionParent("nfc.version.version13", "vim.version.version8")
AddVersionParent("nfc.version.version13", "vim.version.version9")
AddVersionParent("nfc.version.version13", "nfc.version.version3")
AddVersionParent("nfc.version.version13", "vmodl.version.version2")
AddVersionParent("nfc.version.version13", "nfc.version.version2")
AddVersionParent("nfc.version.version13", "vmodl.version.version1")
AddVersionParent("nfc.version.version13", "vmodl.version.version0")
AddVersionParent("nfc.version.version13", "nfc.version.version1")
AddVersionParent("nfc.version.version13", "vmodl.query.version.version1")
AddVersionParent("nfc.version.version13", "vmodl.query.version.version2")
AddVersionParent("nfc.version.version13", "vmodl.query.version.version3")
AddVersionParent("nfc.version.version13", "vmodl.query.version.version4")
AddVersionParent("vim.version.version1", "vim.version.version1")
AddVersionParent("vim.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version1", "vmodl.query.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version2")
AddVersionParent("vim.version.version2", "vmodl.version.version0")
AddVersionParent("vim.version.version2", "vmodl.query.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version2")
AddVersionParent("vim.version.version3", "vim.version.version3")
AddVersionParent("vim.version.version3", "vmodl.version.version0")
AddVersionParent("vim.version.version3", "vmodl.query.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version2")
AddVersionParent("vim.version.version4", "vim.version.version3")
AddVersionParent("vim.version.version4", "vim.version.version4")
AddVersionParent("vim.version.version4", "vmodl.version.version0")
AddVersionParent("vim.version.version4", "vmodl.query.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version2")
AddVersionParent("vim.version.version5", "vim.version.version3")
AddVersionParent("vim.version.version5", "vim.version.version4")
AddVersionParent("vim.version.version5", "vim.version.version5")
AddVersionParent("vim.version.version5", "vmodl.version.version1")
AddVersionParent("vim.version.version5", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.query.version.version1")
AddVersionParent("vim.version.version5", "vmodl.query.version.version2")
AddVersionParent("vim.version.version6", "vim.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version2")
AddVersionParent("vim.version.version6", "vim.version.version3")
AddVersionParent("vim.version.version6", "vim.version.version4")
AddVersionParent("vim.version.version6", "vim.version.version5")
AddVersionParent("vim.version.version6", "vim.version.version6")
AddVersionParent("vim.version.version6", "vmodl.version.version1")
AddVersionParent("vim.version.version6", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.query.version.version1")
AddVersionParent("vim.version.version6", "vmodl.query.version.version2")
AddVersionParent("vim.version.version6", "vmodl.query.version.version3")
AddVersionParent("vim.version.version7", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version2")
AddVersionParent("vim.version.version7", "vim.version.version3")
AddVersionParent("vim.version.version7", "vim.version.version4")
AddVersionParent("vim.version.version7", "vim.version.version5")
AddVersionParent("vim.version.version7", "vim.version.version6")
AddVersionParent("vim.version.version7", "vim.version.version7")
AddVersionParent("vim.version.version7", "vmodl.version.version2")
AddVersionParent("vim.version.version7", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.version.version0")
AddVersionParent("vim.version.version7", "vmodl.query.version.version1")
AddVersionParent("vim.version.version7", "vmodl.query.version.version2")
AddVersionParent("vim.version.version7", "vmodl.query.version.version3")
AddVersionParent("vim.version.version7", "vmodl.query.version.version4")
AddVersionParent("vim.version.version8", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version8", "vim.version.version1")
AddVersionParent("vim.version.version8", "vim.version.version2")
AddVersionParent("vim.version.version8", "vim.version.version3")
AddVersionParent("vim.version.version8", "vim.version.version4")
AddVersionParent("vim.version.version8", "vim.version.version5")
AddVersionParent("vim.version.version8", "vim.version.version6")
AddVersionParent("vim.version.version8", "vim.version.version7")
AddVersionParent("vim.version.version8", "vim.version.version8")
AddVersionParent("vim.version.version8", "vmodl.version.version2")
AddVersionParent("vim.version.version8", "vmodl.version.version1")
AddVersionParent("vim.version.version8", "vmodl.version.version0")
AddVersionParent("vim.version.version8", "vmodl.query.version.version1")
AddVersionParent("vim.version.version8", "vmodl.query.version.version2")
AddVersionParent("vim.version.version8", "vmodl.query.version.version3")
AddVersionParent("vim.version.version8", "vmodl.query.version.version4")
AddVersionParent("vim.version.version9", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version9", "vim.version.version1")
AddVersionParent("vim.version.version9", "vim.version.version2")
AddVersionParent("vim.version.version9", "vim.version.version3")
AddVersionParent("vim.version.version9", "vim.version.version4")
AddVersionParent("vim.version.version9", "vim.version.version5")
AddVersionParent("vim.version.version9", "vim.version.version6")
AddVersionParent("vim.version.version9", "vim.version.version7")
AddVersionParent("vim.version.version9", "vim.version.version8")
AddVersionParent("vim.version.version9", "vim.version.version9")
AddVersionParent("vim.version.version9", "vmodl.version.version2")
AddVersionParent("vim.version.version9", "vmodl.version.version1")
AddVersionParent("vim.version.version9", "vmodl.version.version0")
AddVersionParent("vim.version.version9", "vmodl.query.version.version1")
AddVersionParent("vim.version.version9", "vmodl.query.version.version2")
AddVersionParent("vim.version.version9", "vmodl.query.version.version3")
AddVersionParent("vim.version.version9", "vmodl.query.version.version4")
AddVersionParent("nfc.version.version3", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.version3", "vim.version.version1")
AddVersionParent("nfc.version.version3", "nfc.version.version3")
AddVersionParent("nfc.version.version3", "vmodl.version.version2")
AddVersionParent("nfc.version.version3", "nfc.version.version2")
AddVersionParent("nfc.version.version3", "vmodl.version.version1")
AddVersionParent("nfc.version.version3", "vmodl.version.version0")
AddVersionParent("nfc.version.version3", "nfc.version.version1")
AddVersionParent("nfc.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version2")
AddVersionParent("vmodl.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version0")
AddVersionParent("nfc.version.version2", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.version2", "vim.version.version1")
AddVersionParent("nfc.version.version2", "vmodl.version.version2")
AddVersionParent("nfc.version.version2", "nfc.version.version2")
AddVersionParent("nfc.version.version2", "vmodl.version.version1")
AddVersionParent("nfc.version.version2", "vmodl.version.version0")
AddVersionParent("nfc.version.version2", "nfc.version.version1")
AddVersionParent("nfc.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.version.version0", "vmodl.version.version0")
AddVersionParent("nfc.version.version1", "vim.version.version1")
AddVersionParent("nfc.version.version1", "vmodl.version.version0")
AddVersionParent("nfc.version.version1", "nfc.version.version1")
AddVersionParent("nfc.version.version1", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version1", "vmodl.query.version.version1")
AddVersionParent("nfc.version.legacy", "vim.version.version10")
AddVersionParent("nfc.version.legacy", "vim.version.version11")
AddVersionParent("nfc.version.legacy", "vim.version.version12")
AddVersionParent("nfc.version.legacy", "nfc.version.unstable")
AddVersionParent("nfc.version.legacy", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.legacy", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.legacy", "nfc.version.version11")
AddVersionParent("nfc.version.legacy", "nfc.version.version10")
AddVersionParent("nfc.version.legacy", "vim.version.version13")
AddVersionParent("nfc.version.legacy", "vim.version.unstable")
AddVersionParent("nfc.version.legacy", "nfc.version.version12")
AddVersionParent("nfc.version.legacy", "nfc.version.version13")
AddVersionParent("nfc.version.legacy", "vim.version.version1")
AddVersionParent("nfc.version.legacy", "vim.version.version2")
AddVersionParent("nfc.version.legacy", "vim.version.version3")
AddVersionParent("nfc.version.legacy", "vim.version.version4")
AddVersionParent("nfc.version.legacy", "vim.version.version5")
AddVersionParent("nfc.version.legacy", "vim.version.version6")
AddVersionParent("nfc.version.legacy", "vim.version.version7")
AddVersionParent("nfc.version.legacy", "vim.version.version8")
AddVersionParent("nfc.version.legacy", "vim.version.version9")
AddVersionParent("nfc.version.legacy", "nfc.version.version3")
AddVersionParent("nfc.version.legacy", "vmodl.version.version2")
AddVersionParent("nfc.version.legacy", "nfc.version.version2")
AddVersionParent("nfc.version.legacy", "vmodl.version.version1")
AddVersionParent("nfc.version.legacy", "vmodl.version.version0")
AddVersionParent("nfc.version.legacy", "nfc.version.version1")
AddVersionParent("nfc.version.legacy", "vmodl.query.version.version1")
AddVersionParent("nfc.version.legacy", "nfc.version.legacy")
AddVersionParent("nfc.version.legacy", "vmodl.query.version.version2")
AddVersionParent("nfc.version.legacy", "vmodl.query.version.version3")
AddVersionParent("nfc.version.legacy", "vmodl.query.version.version4")
AddVersionParent("nfc.version.legacy", "vim.version.legacy")
AddVersionParent("nfc.version.legacy", "vim.version.m5")
AddVersionParent("nfc.version.legacy", "nfc.version.m5")
AddVersionParent("nfc.version.legacy", "nfc.version.stable")
AddVersionParent("nfc.version.legacy", "vim.version.stable")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version4")
AddVersionParent("vpx.version.legacy", "vim.version.version10")
AddVersionParent("vpx.version.legacy", "vim.version.version11")
AddVersionParent("vpx.version.legacy", "vim.version.version12")
AddVersionParent("vpx.version.legacy", "nfc.version.unstable")
AddVersionParent("vpx.version.legacy", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.legacy", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.legacy", "vpx.version.version13")
AddVersionParent("vpx.version.legacy", "vpx.version.version10")
AddVersionParent("vpx.version.legacy", "vpx.version.version11")
AddVersionParent("vpx.version.legacy", "vpx.version.version12")
AddVersionParent("vpx.version.legacy", "vpx.version.m5")
AddVersionParent("vpx.version.legacy", "nfc.version.version11")
AddVersionParent("vpx.version.legacy", "nfc.version.version10")
AddVersionParent("vpx.version.legacy", "vim.version.version13")
AddVersionParent("vpx.version.legacy", "vim.version.unstable")
AddVersionParent("vpx.version.legacy", "nfc.version.version12")
AddVersionParent("vpx.version.legacy", "nfc.version.version13")
AddVersionParent("vpx.version.legacy", "vim.version.version1")
AddVersionParent("vpx.version.legacy", "vim.version.version2")
AddVersionParent("vpx.version.legacy", "vim.version.version3")
AddVersionParent("vpx.version.legacy", "vim.version.version4")
AddVersionParent("vpx.version.legacy", "vim.version.version5")
AddVersionParent("vpx.version.legacy", "vim.version.version6")
AddVersionParent("vpx.version.legacy", "vim.version.version7")
AddVersionParent("vpx.version.legacy", "vim.version.version8")
AddVersionParent("vpx.version.legacy", "vim.version.version9")
AddVersionParent("vpx.version.legacy", "nfc.version.version3")
AddVersionParent("vpx.version.legacy", "vmodl.version.version2")
AddVersionParent("vpx.version.legacy", "nfc.version.version2")
AddVersionParent("vpx.version.legacy", "vmodl.version.version1")
AddVersionParent("vpx.version.legacy", "vmodl.version.version0")
AddVersionParent("vpx.version.legacy", "nfc.version.version1")
AddVersionParent("vpx.version.legacy", "vmodl.query.version.version1")
AddVersionParent("vpx.version.legacy", "nfc.version.legacy")
AddVersionParent("vpx.version.legacy", "vmodl.query.version.version2")
AddVersionParent("vpx.version.legacy", "vmodl.query.version.version3")
AddVersionParent("vpx.version.legacy", "vmodl.query.version.version4")
AddVersionParent("vpx.version.legacy", "vpx.version.legacy")
AddVersionParent("vpx.version.legacy", "vim.version.legacy")
AddVersionParent("vpx.version.legacy", "vpx.version.version1")
AddVersionParent("vpx.version.legacy", "vim.version.m5")
AddVersionParent("vpx.version.legacy", "nfc.version.m5")
AddVersionParent("vpx.version.legacy", "vpx.version.version6")
AddVersionParent("vpx.version.legacy", "vpx.version.version7")
AddVersionParent("vpx.version.legacy", "vpx.version.version8")
AddVersionParent("vpx.version.legacy", "vpx.version.version9")
AddVersionParent("vpx.version.legacy", "vpx.version.stable")
AddVersionParent("vpx.version.legacy", "vpx.version.unstable")
AddVersionParent("vpx.version.legacy", "nfc.version.stable")
AddVersionParent("vpx.version.legacy", "vim.version.stable")
AddVersionParent("vim.version.legacy", "vim.version.version10")
AddVersionParent("vim.version.legacy", "vim.version.version11")
AddVersionParent("vim.version.legacy", "vim.version.version12")
AddVersionParent("vim.version.legacy", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.legacy", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.legacy", "vim.version.version13")
AddVersionParent("vim.version.legacy", "vim.version.unstable")
AddVersionParent("vim.version.legacy", "vim.version.version1")
AddVersionParent("vim.version.legacy", "vim.version.version2")
AddVersionParent("vim.version.legacy", "vim.version.version3")
AddVersionParent("vim.version.legacy", "vim.version.version4")
AddVersionParent("vim.version.legacy", "vim.version.version5")
AddVersionParent("vim.version.legacy", "vim.version.version6")
AddVersionParent("vim.version.legacy", "vim.version.version7")
AddVersionParent("vim.version.legacy", "vim.version.version8")
AddVersionParent("vim.version.legacy", "vim.version.version9")
AddVersionParent("vim.version.legacy", "vmodl.version.version2")
AddVersionParent("vim.version.legacy", "vmodl.version.version1")
AddVersionParent("vim.version.legacy", "vmodl.version.version0")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version1")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version2")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version3")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version4")
AddVersionParent("vim.version.legacy", "vim.version.legacy")
AddVersionParent("vim.version.legacy", "vim.version.m5")
AddVersionParent("vim.version.legacy", "vim.version.stable")
AddVersionParent("vpx.version.version1", "vim.version.version1")
AddVersionParent("vpx.version.version1", "vim.version.version2")
AddVersionParent("vpx.version.version1", "vim.version.version3")
AddVersionParent("vpx.version.version1", "vim.version.version4")
AddVersionParent("vpx.version.version1", "vim.version.version5")
AddVersionParent("vpx.version.version1", "vmodl.version.version1")
AddVersionParent("vpx.version.version1", "vmodl.version.version0")
AddVersionParent("vpx.version.version1", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version1", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version1", "vpx.version.version1")
AddVersionParent("vim.version.m5", "vim.version.version10")
AddVersionParent("vim.version.m5", "vim.version.version11")
AddVersionParent("vim.version.m5", "vim.version.version12")
AddVersionParent("vim.version.m5", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.m5", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.m5", "vim.version.version13")
AddVersionParent("vim.version.m5", "vim.version.version1")
AddVersionParent("vim.version.m5", "vim.version.version2")
AddVersionParent("vim.version.m5", "vim.version.version3")
AddVersionParent("vim.version.m5", "vim.version.version4")
AddVersionParent("vim.version.m5", "vim.version.version5")
AddVersionParent("vim.version.m5", "vim.version.version6")
AddVersionParent("vim.version.m5", "vim.version.version7")
AddVersionParent("vim.version.m5", "vim.version.version8")
AddVersionParent("vim.version.m5", "vim.version.version9")
AddVersionParent("vim.version.m5", "vmodl.version.version2")
AddVersionParent("vim.version.m5", "vmodl.version.version1")
AddVersionParent("vim.version.m5", "vmodl.version.version0")
AddVersionParent("vim.version.m5", "vmodl.query.version.version1")
AddVersionParent("vim.version.m5", "vmodl.query.version.version2")
AddVersionParent("vim.version.m5", "vmodl.query.version.version3")
AddVersionParent("vim.version.m5", "vmodl.query.version.version4")
AddVersionParent("vim.version.m5", "vim.version.m5")
AddVersionParent("nfc.version.m5", "vim.version.version10")
AddVersionParent("nfc.version.m5", "vim.version.version11")
AddVersionParent("nfc.version.m5", "vim.version.version12")
AddVersionParent("nfc.version.m5", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.m5", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.m5", "nfc.version.version11")
AddVersionParent("nfc.version.m5", "nfc.version.version10")
AddVersionParent("nfc.version.m5", "vim.version.version13")
AddVersionParent("nfc.version.m5", "nfc.version.version12")
AddVersionParent("nfc.version.m5", "nfc.version.version13")
AddVersionParent("nfc.version.m5", "vim.version.version1")
AddVersionParent("nfc.version.m5", "vim.version.version2")
AddVersionParent("nfc.version.m5", "vim.version.version3")
AddVersionParent("nfc.version.m5", "vim.version.version4")
AddVersionParent("nfc.version.m5", "vim.version.version5")
AddVersionParent("nfc.version.m5", "vim.version.version6")
AddVersionParent("nfc.version.m5", "vim.version.version7")
AddVersionParent("nfc.version.m5", "vim.version.version8")
AddVersionParent("nfc.version.m5", "vim.version.version9")
AddVersionParent("nfc.version.m5", "nfc.version.version3")
AddVersionParent("nfc.version.m5", "vmodl.version.version2")
AddVersionParent("nfc.version.m5", "nfc.version.version2")
AddVersionParent("nfc.version.m5", "vmodl.version.version1")
AddVersionParent("nfc.version.m5", "vmodl.version.version0")
AddVersionParent("nfc.version.m5", "nfc.version.version1")
AddVersionParent("nfc.version.m5", "vmodl.query.version.version1")
AddVersionParent("nfc.version.m5", "vmodl.query.version.version2")
AddVersionParent("nfc.version.m5", "vmodl.query.version.version3")
AddVersionParent("nfc.version.m5", "vmodl.query.version.version4")
AddVersionParent("nfc.version.m5", "vim.version.m5")
AddVersionParent("nfc.version.m5", "nfc.version.m5")
AddVersionParent("vpx.version.version6", "vim.version.version1")
AddVersionParent("vpx.version.version6", "vim.version.version2")
AddVersionParent("vpx.version.version6", "vim.version.version3")
AddVersionParent("vpx.version.version6", "vim.version.version4")
AddVersionParent("vpx.version.version6", "vim.version.version5")
AddVersionParent("vpx.version.version6", "vim.version.version6")
AddVersionParent("vpx.version.version6", "vmodl.version.version1")
AddVersionParent("vpx.version.version6", "vmodl.version.version0")
AddVersionParent("vpx.version.version6", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version6", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version6", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version6", "vpx.version.version1")
AddVersionParent("vpx.version.version6", "vpx.version.version6")
AddVersionParent("vpx.version.version7", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version7", "vim.version.version1")
AddVersionParent("vpx.version.version7", "vim.version.version2")
AddVersionParent("vpx.version.version7", "vim.version.version3")
AddVersionParent("vpx.version.version7", "vim.version.version4")
AddVersionParent("vpx.version.version7", "vim.version.version5")
AddVersionParent("vpx.version.version7", "vim.version.version6")
AddVersionParent("vpx.version.version7", "vim.version.version7")
AddVersionParent("vpx.version.version7", "vmodl.version.version2")
AddVersionParent("vpx.version.version7", "vmodl.version.version1")
AddVersionParent("vpx.version.version7", "vmodl.version.version0")
AddVersionParent("vpx.version.version7", "nfc.version.version1")
AddVersionParent("vpx.version.version7", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version7", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version7", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version7", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version7", "vpx.version.version1")
AddVersionParent("vpx.version.version7", "vpx.version.version6")
AddVersionParent("vpx.version.version7", "vpx.version.version7")
AddVersionParent("vpx.version.version8", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version8", "vim.version.version1")
AddVersionParent("vpx.version.version8", "vim.version.version2")
AddVersionParent("vpx.version.version8", "vim.version.version3")
AddVersionParent("vpx.version.version8", "vim.version.version4")
AddVersionParent("vpx.version.version8", "vim.version.version5")
AddVersionParent("vpx.version.version8", "vim.version.version6")
AddVersionParent("vpx.version.version8", "vim.version.version7")
AddVersionParent("vpx.version.version8", "vim.version.version8")
AddVersionParent("vpx.version.version8", "vmodl.version.version2")
AddVersionParent("vpx.version.version8", "nfc.version.version2")
AddVersionParent("vpx.version.version8", "vmodl.version.version1")
AddVersionParent("vpx.version.version8", "vmodl.version.version0")
AddVersionParent("vpx.version.version8", "nfc.version.version1")
AddVersionParent("vpx.version.version8", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version8", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version8", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version8", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version8", "vpx.version.version1")
AddVersionParent("vpx.version.version8", "vpx.version.version6")
AddVersionParent("vpx.version.version8", "vpx.version.version7")
AddVersionParent("vpx.version.version8", "vpx.version.version8")
AddVersionParent("vpx.version.version9", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.version9", "vim.version.version1")
AddVersionParent("vpx.version.version9", "vim.version.version2")
AddVersionParent("vpx.version.version9", "vim.version.version3")
AddVersionParent("vpx.version.version9", "vim.version.version4")
AddVersionParent("vpx.version.version9", "vim.version.version5")
AddVersionParent("vpx.version.version9", "vim.version.version6")
AddVersionParent("vpx.version.version9", "vim.version.version7")
AddVersionParent("vpx.version.version9", "vim.version.version8")
AddVersionParent("vpx.version.version9", "vim.version.version9")
AddVersionParent("vpx.version.version9", "vmodl.version.version2")
AddVersionParent("vpx.version.version9", "nfc.version.version2")
AddVersionParent("vpx.version.version9", "vmodl.version.version1")
AddVersionParent("vpx.version.version9", "vmodl.version.version0")
AddVersionParent("vpx.version.version9", "nfc.version.version1")
AddVersionParent("vpx.version.version9", "vmodl.query.version.version1")
AddVersionParent("vpx.version.version9", "vmodl.query.version.version2")
AddVersionParent("vpx.version.version9", "vmodl.query.version.version3")
AddVersionParent("vpx.version.version9", "vmodl.query.version.version4")
AddVersionParent("vpx.version.version9", "vpx.version.version1")
AddVersionParent("vpx.version.version9", "vpx.version.version6")
AddVersionParent("vpx.version.version9", "vpx.version.version7")
AddVersionParent("vpx.version.version9", "vpx.version.version8")
AddVersionParent("vpx.version.version9", "vpx.version.version9")
AddVersionParent("vpx.version.stable", "vim.version.version10")
AddVersionParent("vpx.version.stable", "vim.version.version11")
AddVersionParent("vpx.version.stable", "vim.version.version12")
AddVersionParent("vpx.version.stable", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.stable", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.stable", "vpx.version.version13")
AddVersionParent("vpx.version.stable", "vpx.version.version10")
AddVersionParent("vpx.version.stable", "vpx.version.version11")
AddVersionParent("vpx.version.stable", "vpx.version.version12")
AddVersionParent("vpx.version.stable", "vpx.version.m5")
AddVersionParent("vpx.version.stable", "nfc.version.version11")
AddVersionParent("vpx.version.stable", "nfc.version.version10")
AddVersionParent("vpx.version.stable", "vim.version.version13")
AddVersionParent("vpx.version.stable", "nfc.version.version12")
AddVersionParent("vpx.version.stable", "nfc.version.version13")
AddVersionParent("vpx.version.stable", "vim.version.version1")
AddVersionParent("vpx.version.stable", "vim.version.version2")
AddVersionParent("vpx.version.stable", "vim.version.version3")
AddVersionParent("vpx.version.stable", "vim.version.version4")
AddVersionParent("vpx.version.stable", "vim.version.version5")
AddVersionParent("vpx.version.stable", "vim.version.version6")
AddVersionParent("vpx.version.stable", "vim.version.version7")
AddVersionParent("vpx.version.stable", "vim.version.version8")
AddVersionParent("vpx.version.stable", "vim.version.version9")
AddVersionParent("vpx.version.stable", "nfc.version.version3")
AddVersionParent("vpx.version.stable", "vmodl.version.version2")
AddVersionParent("vpx.version.stable", "nfc.version.version2")
AddVersionParent("vpx.version.stable", "vmodl.version.version1")
AddVersionParent("vpx.version.stable", "vmodl.version.version0")
AddVersionParent("vpx.version.stable", "nfc.version.version1")
AddVersionParent("vpx.version.stable", "vmodl.query.version.version1")
AddVersionParent("vpx.version.stable", "vmodl.query.version.version2")
AddVersionParent("vpx.version.stable", "vmodl.query.version.version3")
AddVersionParent("vpx.version.stable", "vmodl.query.version.version4")
AddVersionParent("vpx.version.stable", "vpx.version.version1")
AddVersionParent("vpx.version.stable", "vim.version.m5")
AddVersionParent("vpx.version.stable", "nfc.version.m5")
AddVersionParent("vpx.version.stable", "vpx.version.version6")
AddVersionParent("vpx.version.stable", "vpx.version.version7")
AddVersionParent("vpx.version.stable", "vpx.version.version8")
AddVersionParent("vpx.version.stable", "vpx.version.version9")
AddVersionParent("vpx.version.stable", "vpx.version.stable")
AddVersionParent("vpx.version.stable", "nfc.version.stable")
AddVersionParent("vpx.version.stable", "vim.version.stable")
AddVersionParent("vpx.version.unstable", "vim.version.version10")
AddVersionParent("vpx.version.unstable", "vim.version.version11")
AddVersionParent("vpx.version.unstable", "vim.version.version12")
AddVersionParent("vpx.version.unstable", "nfc.version.unstable")
AddVersionParent("vpx.version.unstable", "vmodl.reflect.version.version2")
AddVersionParent("vpx.version.unstable", "vmodl.reflect.version.version1")
AddVersionParent("vpx.version.unstable", "vpx.version.version13")
AddVersionParent("vpx.version.unstable", "vpx.version.version10")
AddVersionParent("vpx.version.unstable", "vpx.version.version11")
AddVersionParent("vpx.version.unstable", "vpx.version.version12")
AddVersionParent("vpx.version.unstable", "vpx.version.m5")
AddVersionParent("vpx.version.unstable", "nfc.version.version11")
AddVersionParent("vpx.version.unstable", "nfc.version.version10")
AddVersionParent("vpx.version.unstable", "vim.version.version13")
AddVersionParent("vpx.version.unstable", "vim.version.unstable")
AddVersionParent("vpx.version.unstable", "nfc.version.version12")
AddVersionParent("vpx.version.unstable", "nfc.version.version13")
AddVersionParent("vpx.version.unstable", "vim.version.version1")
AddVersionParent("vpx.version.unstable", "vim.version.version2")
AddVersionParent("vpx.version.unstable", "vim.version.version3")
AddVersionParent("vpx.version.unstable", "vim.version.version4")
AddVersionParent("vpx.version.unstable", "vim.version.version5")
AddVersionParent("vpx.version.unstable", "vim.version.version6")
AddVersionParent("vpx.version.unstable", "vim.version.version7")
AddVersionParent("vpx.version.unstable", "vim.version.version8")
AddVersionParent("vpx.version.unstable", "vim.version.version9")
AddVersionParent("vpx.version.unstable", "nfc.version.version3")
AddVersionParent("vpx.version.unstable", "vmodl.version.version2")
AddVersionParent("vpx.version.unstable", "nfc.version.version2")
AddVersionParent("vpx.version.unstable", "vmodl.version.version1")
AddVersionParent("vpx.version.unstable", "vmodl.version.version0")
AddVersionParent("vpx.version.unstable", "nfc.version.version1")
AddVersionParent("vpx.version.unstable", "vmodl.query.version.version1")
AddVersionParent("vpx.version.unstable", "vmodl.query.version.version2")
AddVersionParent("vpx.version.unstable", "vmodl.query.version.version3")
AddVersionParent("vpx.version.unstable", "vmodl.query.version.version4")
AddVersionParent("vpx.version.unstable", "vpx.version.version1")
AddVersionParent("vpx.version.unstable", "vim.version.m5")
AddVersionParent("vpx.version.unstable", "nfc.version.m5")
AddVersionParent("vpx.version.unstable", "vpx.version.version6")
AddVersionParent("vpx.version.unstable", "vpx.version.version7")
AddVersionParent("vpx.version.unstable", "vpx.version.version8")
AddVersionParent("vpx.version.unstable", "vpx.version.version9")
AddVersionParent("vpx.version.unstable", "vpx.version.stable")
AddVersionParent("vpx.version.unstable", "vpx.version.unstable")
AddVersionParent("vpx.version.unstable", "nfc.version.stable")
AddVersionParent("vpx.version.unstable", "vim.version.stable")
AddVersionParent("nfc.version.stable", "vim.version.version10")
AddVersionParent("nfc.version.stable", "vim.version.version11")
AddVersionParent("nfc.version.stable", "vim.version.version12")
AddVersionParent("nfc.version.stable", "vmodl.reflect.version.version2")
AddVersionParent("nfc.version.stable", "vmodl.reflect.version.version1")
AddVersionParent("nfc.version.stable", "nfc.version.version11")
AddVersionParent("nfc.version.stable", "nfc.version.version10")
AddVersionParent("nfc.version.stable", "vim.version.version13")
AddVersionParent("nfc.version.stable", "nfc.version.version12")
AddVersionParent("nfc.version.stable", "nfc.version.version13")
AddVersionParent("nfc.version.stable", "vim.version.version1")
AddVersionParent("nfc.version.stable", "vim.version.version2")
AddVersionParent("nfc.version.stable", "vim.version.version3")
AddVersionParent("nfc.version.stable", "vim.version.version4")
AddVersionParent("nfc.version.stable", "vim.version.version5")
AddVersionParent("nfc.version.stable", "vim.version.version6")
AddVersionParent("nfc.version.stable", "vim.version.version7")
AddVersionParent("nfc.version.stable", "vim.version.version8")
AddVersionParent("nfc.version.stable", "vim.version.version9")
AddVersionParent("nfc.version.stable", "nfc.version.version3")
AddVersionParent("nfc.version.stable", "vmodl.version.version2")
AddVersionParent("nfc.version.stable", "nfc.version.version2")
AddVersionParent("nfc.version.stable", "vmodl.version.version1")
AddVersionParent("nfc.version.stable", "vmodl.version.version0")
AddVersionParent("nfc.version.stable", "nfc.version.version1")
AddVersionParent("nfc.version.stable", "vmodl.query.version.version1")
AddVersionParent("nfc.version.stable", "vmodl.query.version.version2")
AddVersionParent("nfc.version.stable", "vmodl.query.version.version3")
AddVersionParent("nfc.version.stable", "vmodl.query.version.version4")
AddVersionParent("nfc.version.stable", "vim.version.m5")
AddVersionParent("nfc.version.stable", "nfc.version.m5")
AddVersionParent("nfc.version.stable", "nfc.version.stable")
AddVersionParent("nfc.version.stable", "vim.version.stable")
AddVersionParent("vim.version.stable", "vim.version.version10")
AddVersionParent("vim.version.stable", "vim.version.version11")
AddVersionParent("vim.version.stable", "vim.version.version12")
AddVersionParent("vim.version.stable", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.stable", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.stable", "vim.version.version13")
AddVersionParent("vim.version.stable", "vim.version.version1")
AddVersionParent("vim.version.stable", "vim.version.version2")
AddVersionParent("vim.version.stable", "vim.version.version3")
AddVersionParent("vim.version.stable", "vim.version.version4")
AddVersionParent("vim.version.stable", "vim.version.version5")
AddVersionParent("vim.version.stable", "vim.version.version6")
AddVersionParent("vim.version.stable", "vim.version.version7")
AddVersionParent("vim.version.stable", "vim.version.version8")
AddVersionParent("vim.version.stable", "vim.version.version9")
AddVersionParent("vim.version.stable", "vmodl.version.version2")
AddVersionParent("vim.version.stable", "vmodl.version.version1")
AddVersionParent("vim.version.stable", "vmodl.version.version0")
AddVersionParent("vim.version.stable", "vmodl.query.version.version1")
AddVersionParent("vim.version.stable", "vmodl.query.version.version2")
AddVersionParent("vim.version.stable", "vmodl.query.version.version3")
AddVersionParent("vim.version.stable", "vmodl.query.version.version4")
AddVersionParent("vim.version.stable", "vim.version.m5")
AddVersionParent("vim.version.stable", "vim.version.stable")

newestVersions.Add("vpx.version.unstable")
stableVersions.Add("vpx.version.stable")
publicVersions.Add("vpx.version.m5")
dottedVersions.Add("vpx.version.version13")
oldestVersions.Add("vpx.version.version1")

CreateManagedType("vpx.AlertManager", "VpxAlertManager", "vmodl.ManagedObject", "vpx.version.version6", None, [("ClearAlerts", "DebugClearAlerts", "vpx.version.version6", (), (0, "void", "void"), "Global.VCServer", None), ("FetchAlerts", "DebugFetchAlerts", "vpx.version.version6", (), (F_OPTIONAL, "string[]", "string[]"), "Global.VCServer", None), ("GenerateAlert", "GenerateAlert", "vpx.version.version6", (), (0, "void", "void"), "Global.VCServer", None)])
CreateManagedType("vpx.CallbackServiceManager", "VpxCallbackServiceManager", "vmodl.ManagedObject", "vpx.version.version11", None, [("addToWhiteList", "AddToWhiteList", "vpx.version.version11", (("wsdlName", "string", "vpx.version.version11", 0, None),("serviceUrl", "string", "vpx.version.version11", 0, None),("moIdsToAdd", "string[]", "vpx.version.version11", F_OPTIONAL, None),), (0, "void", "void"), "Global.VCServer", ["vim.fault.NotFound", ]), ("removeFromWhiteList", "RemoveFromWhiteList", "vpx.version.version11", (("wsdlName", "string", "vpx.version.version11", 0, None),("serviceUrl", "string", "vpx.version.version11", 0, None),("moIdsToRemove", "string[]", "vpx.version.version11", F_OPTIONAL, None),), (0, "void", "void"), "Global.VCServer", ["vim.fault.NotFound", ]), ("cleanUpWhiteList", "CleanUpWhiteList", "vpx.version.version11", (("wsdlName", "string", "vpx.version.version11", 0, None),("serviceUrl", "string", "vpx.version.version11", 0, None),), (0, "void", "void"), "Global.VCServer", ["vim.fault.NotFound", ]), ("getWhiteList", "GetWhiteList", "vpx.version.version11", (("wsdlName", "string", "vpx.version.version11", 0, None),("serviceUrl", "string", "vpx.version.version11", 0, None),), (F_OPTIONAL, "string[]", "string[]"), "Global.VCServer", ["vim.fault.NotFound", ]), ("registerServiceEndPoint", "RegisterServiceEndPoint", "vpx.version.version11", (("wsdlName", "string", "vpx.version.version11", 0, None),("serviceUrl", "string", "vpx.version.version11", 0, None),), (0, "void", "void"), "Global.VCServer", ["vim.fault.AlreadyExists", ]), ("unRegisterServiceEndPoint", "UnRegisterServiceEndPoint", "vpx.version.version11", (("wsdlName", "string", "vpx.version.version11", 0, None),("serviceUrl", "string", "vpx.version.version11", 0, None),), (0, "void", "void"), "Global.VCServer", ["vim.fault.NotFound", ])])
CreateManagedType("vpx.DebugManager", "VpxDebugManager", "vmodl.ManagedObject", "vpx.version.version1", [("faultManager", "vpx.faultInjector.FaultInjectionManager", "vpx.version.version1", 0, "Global.VCServer"), ("alertManager", "vpx.AlertManager", "vpx.version.version6", 0, "Global.VCServer"), ("drsDebugManager", "vpx.drs.DrsDebugManager", "vpx.version.version7", 0, "Global.VCServer"), ("dvsTestManager", "vpx.dvsTester.DvsTestManager", "vpx.version.legacy", 0, "Global.VCServer"), ("alarmTestManager", "vpx.alarmTester.AlarmTestManager", "vpx.version.legacy", 0, "Global.VCServer"), ("benchmarkManager", "vpx.bench.BenchmarkManager", "vpx.version.version1", 0, "Global.VCServer")], [("UpdateConfig", "DebugUpdateConfig", "vpx.version.version1", (("key", "string", "vpx.version.version1", 0, None),("value", "anyType", "vpx.version.version1", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("shutdown", "DebugShutdown", "vpx.version.version1", (), (0, "void", "void"), "Global.VCServer", None), ("rearrangeLayoutEx", "RearrangeLayoutEx", "vpx.version.version6", (("keyMap", "vmodl.KeyAnyValue[]", "vpx.version.version6", 0, None),("newLayout", "vim.vm.FileLayoutEx", "vpx.version.version6", 0, None),), (0, "vim.vm.FileLayoutEx", "vim.vm.FileLayoutEx"), "Global.VCServer", None), ("markLogs", "DebugMarkLogs", "vpx.version.legacy", (("message", "string", "vpx.version.legacy", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("traceOperation", "DebugTraceOperation_Task", "vpx.version.legacy", (("mo", "vmodl.ManagedObject", "vpx.version.legacy", 0, None),("method", "vmodl.MethodName", "vpx.version.legacy", 0, None),("args", "anyType[]", "vpx.version.legacy", F_OPTIONAL, None),), (0, "vim.Task", "vpx.DebugManager.TraceResult"), "Global.VCServer", None), ("WaitForSync", "DebugWaitForSync", "vpx.version.version1", (("host", "vim.HostSystem", "vpx.version.version1", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("WaitForSpecUpdate", "DebugWaitForSpecUpdate", "vpx.version.version1", (("host", "vim.HostSystem", "vpx.version.version1", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ReadMirrorTree", "DebugReadMirrorTree", "vpx.version.version1", (("compRes", "vim.ComputeResource", "vpx.version.version1", 0, None),("host", "vim.HostSystem", "vpx.version.version1", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("ReadRootResources", "DebugReadRootResources", "vpx.version.version1", (("host", "vim.HostSystem", "vpx.version.version1", 0, None),), (0, "vim.ResourceConfigSpec", "vim.ResourceConfigSpec"), "Global.VCServer", None), ("IsFeatureStateEnabled", "DebugIsFeatureStateEnabled", "vpx.version.unstable", (("name", "string", "vpx.version.unstable", 0, None),), (0, "boolean", "boolean"), "Global.VCServer", None)])
CreateDataType("vpx.DebugManager.TraceResult", "VpxDebugManagerTraceResult", "vmodl.DynamicData", "vpx.version.legacy", [("nonTaskResult", "anyType", "vpx.version.legacy", F_OPTIONAL), ("nonTaskError", "vmodl.MethodFault", "vpx.version.legacy", F_OPTIONAL), ("taskInfo", "vim.TaskInfo", "vpx.version.legacy", F_OPTIONAL), ("traceInfo", "vmodl.KeyAnyValue[]", "vpx.version.legacy", F_OPTIONAL)])
CreateManagedType("vpx.RelationshipManager", "VpxRelationshipManager", "vmodl.ManagedObject", "vpx.version.unstable", [("entries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("entityParentEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("folderChildEntitiesEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("entityDatacenterEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("datacenterHostFolderEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("datacenterVmFolderEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("datacenterDatastoreFolderEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("datacenterNetworkFolderEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("datacenterDVSEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("datacenterPortgroupsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("computeResourceHostsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("computeResourceRootResGroupEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("resourceGroupOwnerEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("resourceGroupChildResGroupsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("resourceGroupVMsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("parentDvsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("dvsPortgroupsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("hostVMsEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View"), ("vmResGroupEntries", "vpx.RelationshipManager.RelationEntry[]", "vpx.version.unstable", F_OPTIONAL, "System.View")], None)
CreateDataType("vpx.RelationshipManager.RelationEntry", "VpxRelationshipManagerRelationEntry", "vmodl.DynamicData", "vpx.version.unstable", [("src", "vmodl.ManagedObject", "vpx.version.unstable", F_OPTIONAL), ("dst", "vmodl.ManagedObject", "vpx.version.unstable", F_OPTIONAL), ("tag", "string", "vpx.version.unstable", 0)])
CreateEnumType("vpx.RelationshipManager.RelationEntry.Tag", "VpxRelationshipManagerRelationEntryTag", "vpx.version.unstable", ["entityParent", "folderChildEntities", "entityDatacenter", "datacenterHostFolder", "datacenterVmFolder", "datacenterDatastoreFolder", "datacenterNetworkFolder", "datacenterDVS", "datacenterPortgroups", "computeResourceHosts", "computeResourceRootResGroup", "resourceGroupOwner", "resourceGroupChildResGroups", "resourceGroupVMs", "parentDvs", "dvsPortgroups", "hostVMs", "vmResGroup"])
CreateManagedType("vpx.SecurityManager", "VpxSecurityManager", "vmodl.ManagedObject", "vpx.version.version1", None, [("reloadSslCertificate", "UpdateSSLCertificate", "vpx.version.version1", (), (0, "void", "void"), "Global.VCServer", ["vpx.fault.SecurityConfigFault", ])])
CreateManagedType("vpx.ServiceInstance", "VpxServiceInstance", "vmodl.ManagedObject", "vpx.version.version1", [("debugManager", "vpx.DebugManager", "vpx.version.version1", 0, "Global.VCServer"), ("profiler", "vpx.profiler.Profiler", "vpx.version.version1", 0, "Global.VCServer"), ("hostPicker", "vpx.hostPicker.HostPickerManager", "vpx.version.version6", 0, "Global.VCServer"), ("security", "vpx.SecurityManager", "vpx.version.version6", 0, "Global.VCServer"), ("inMemLogBufferManager", "vpx.inMemLogBufferManager.InMemLogBufferManager", "vpx.version.version6", 0, "Global.VCServer"), ("methodCounter", "vpx.methodCounter.MethodCounter", "vpx.version.unstable", F_OPTIONAL, "Global.VCServer")], None)
CreateDataType("vpx.alarmTester.AlarmChangeInfo", "VpxAlarmTesterAlarmChangeInfo", "vmodl.DynamicData", "vpx.version.version1", [("generationInfo", "vpx.alarmTester.AlarmGenerationInfo", "vpx.version.version1", 0), ("time", "vmodl.DateTime", "vpx.version.version1", F_OPTIONAL), ("values", "vpx.alarmTester.AlarmMetricRuntime[]", "vpx.version.version1", 0)])
CreateDataType("vpx.alarmTester.AlarmGenerationInfo", "VpxAlarmTesterAlarmGenerationInfo", "vmodl.DynamicData", "vpx.version.version1", [("alarm", "vim.alarm.Alarm", "vpx.version.version1", 0), ("entity", "vim.ManagedEntity", "vpx.version.version1", 0)])
CreateDataType("vpx.alarmTester.AlarmMetricRuntime", "VpxAlarmTesterAlarmMetricRuntime", "vmodl.DynamicData", "vpx.version.version1", [("metricId", "vim.PerformanceManager.MetricId", "vpx.version.version1", 0), ("value", "int", "vpx.version.version1", 0), ("status", "vim.ManagedEntity.Status", "vpx.version.version1", 0)])
CreateManagedType("vpx.alarmTester.AlarmTestManager", "VpxAlarmTesterAlarmTestManager", "vmodl.ManagedObject", "vpx.version.legacy", None, [("injectMetricTrigger", "AlarmTestManagerInjectMetricTrigger", "vpx.version.legacy", (("change", "vpx.alarmTester.AlarmChangeInfo", "vpx.version.legacy", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("injectEventTrigger", "AlarmTestManagerInjectEventTrigger", "vpx.version.legacy", (("event", "vim.event.Event", "vpx.version.legacy", 0, None),), (0, "void", "void"), "Global.VCServer", None)])
CreateDataType("vpx.backup.Entity", "VpxBackupEntity", "vmodl.DynamicData", "vim.version.version8", None)
CreateDataType("vpx.backup.Entity.DistributedVirtualSwitch", "VpxBackupEntityDistributedVirtualSwitch", "vmodl.DynamicData", "vim.version.version8", [("config", "vim.DistributedVirtualSwitch.ConfigInfo", "vim.version.version8", 0), ("capability", "vim.DistributedVirtualSwitch.Capability", "vim.version.version8", 0), ("networkResourcePool", "vim.dvs.NetworkResourcePool[]", "vim.version.version8", F_OPTIONAL), ("opaqueDataConfig", "vim.dvs.OpaqueData[]", "vim.version.version8", F_OPTIONAL), ("uplinkPortgroups", "vpx.backup.Entity.DistributedVirtualPortgroup[]", "vim.version.version8", F_OPTIONAL)])
CreateDataType("vpx.backup.Entity.DistributedVirtualPortgroup", "VpxBackupEntityDistributedVirtualPortgroup", "vmodl.DynamicData", "vim.version.version8", [("config", "vim.dvs.DistributedVirtualPortgroup.ConfigInfo", "vim.version.version8", 0), ("portKeys", "string[]", "vim.version.version8", F_OPTIONAL), ("dvsUuid", "string", "vim.version.version8", 0), ("opaqueDataConfig", "vim.dvs.OpaqueData[]", "vim.version.version8", F_OPTIONAL)])
CreateDataType("vpx.backup.Entity.UplinkPortConfig", "VpxBackupEntityUplinkPortConfig", "vmodl.DynamicData", "vim.version.version8", [("uplinkPortKey", "string", "vim.version.version8", 0), ("uplinkPortName", "string", "vim.version.version8", 0), ("pnicDevice", "string", "vim.version.version8", F_OPTIONAL), ("uplinkPortgroupKey", "string", "vim.version.version8", F_OPTIONAL)])
CreateManagedType("vpx.bench.BenchmarkManager", "VpxBenchBenchmarkManager", "vmodl.ManagedObject", "vpx.version.version1", [("list", "string[]", "vpx.version.version1", 0, "Global.VCServer")], [("execute", "ExecuteNanoBenchmark", "vpx.version.version1", (("benchmark", "string", "vpx.version.version1", 0, None),("args", "vim.KeyValue[]", "vpx.version.version1", F_OPTIONAL, None),), (0, "string", "string"), "Global.VCServer", None)])
CreateDataType("vpx.cnxmgr.ConnectionState", "VpxCnxmgrConnectionState", "vmodl.DynamicData", "vpx.version.legacy", [("sic", "vim.ServiceInstanceContent", "vpx.version.legacy", F_OPTIONAL)])
CreateDataType("vpx.drs.DrmFtVmPowerOnInfo", "VpxDrsDrmFtVmPowerOnInfo", "vmodl.DynamicData", "vpx.version.version10", [("disableFtAfterPowerOn", "boolean", "vpx.version.version10", 0), ("causeForDisable", "vmodl.MethodFault", "vpx.version.version10", F_OPTIONAL)])
CreateManagedType("vpx.drs.DrsDebugManager", "VpxDrsDrsDebugManager", "vmodl.ManagedObject", "vpx.version.version7", None, [("AskAndRefreshDrmRecommendations", "DrsDebugAskAndRefreshDrmRecommendations", "vpx.version.version7", (("cluster", "vim.ClusterComputeResource", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("AskSdrsRecommendations", "DrsDebugAskSdrsRecommendationsDo", "vpx.version.version7", (("pod", "vim.StoragePod", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ForceIOStatsCollection", "DrsForceIOStatsCollection", "vpx.version.version7", (("host", "vim.HostSystem", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ForceSpaceStatsCollection", "DrsForceSpaceStatsCollection", "vpx.version.version7", (("host", "vim.HostSystem", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ProcessSDRSStats", "DrsProcessSDRSStats", "vpx.version.version7", (("entityMetric", "vim.PerformanceManager.EntityMetric[]", "vpx.version.version7", F_OPTIONAL, None),), (0, "void", "void"), "Global.VCServer", None), ("RolloverStats", "DrsRolloverStats", "vpx.version.version7", (), (0, "void", "void"), "Global.VCServer", None), ("GetStatsKeys", "DrsGetStatsKeys", "vpx.version.version7", (), (F_OPTIONAL, "vim.option.OptionValue[]", "vim.option.OptionValue[]"), "Global.VCServer", None), ("GetDrmDatastoreStats", "DrsGetDrmDatastoreStats", "vpx.version.version7", (("instance", "string", "vpx.version.version7", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("GetDrmVmdkStats", "DrsGetDrmVmdkStats", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),("fileKeys", "int[]", "vpx.version.version7", F_OPTIONAL, None),("instance", "string", "vpx.version.version7", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("GetDrmVmCpuMemStats", "DrsGetDrmVmCpuMemStats", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("GetDrmDatastoreStatsHist", "DrsGetDrmDatastoreStatsHist", "vpx.version.version7", (("instance", "string", "vpx.version.version7", 0, None),("day", "int", "vpx.version.version7", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("GetDrmVmdkStatsHist", "DrsGetDrmVmdkStatsHist", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),("instance", "string", "vpx.version.version7", 0, None),("day", "int", "vpx.version.version7", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("RewindDatastoreStatsClock", "RewindDatastoreStatsClock", "vpx.version.version7", (("instance", "string", "vpx.version.version7", 0, None),("numIntervals", "int", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("RewindVmdkStatsClock", "RewindVmdkStatsClock", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),("numIntervals", "int", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ClearDatastoreStats", "ClearDatastoreStats", "vpx.version.version7", (("instance", "string", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ClearVmStats", "ClearVmStats", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ClearSpaceStats", "DrsClearSpaceStats", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("ComputeQuantiles", "DrsGetQuantiles", "vpx.version.version7", (("data", "int[]", "vpx.version.version7", F_OPTIONAL, None),), (F_OPTIONAL, "double[]", "double[]"), "Global.VCServer", None), ("AddTagToDatastore", "DrsAddDatastoreTag", "vpx.version.version7", (("dsRef", "vim.Datastore", "vpx.version.version7", 0, None),("tag", "string", "vpx.version.version7", 0, None),), (0, "boolean", "boolean"), "Global.VCServer", None), ("RemoveTagFromDatastore", "DrsRemoveDatastoreTag", "vpx.version.version7", (("dsRef", "vim.Datastore", "vpx.version.version7", 0, None),("tag", "string", "vpx.version.version7", 0, None),), (0, "boolean", "boolean"), "Global.VCServer", None), ("QueryDatastoreTags", "DrsQueryDatastoreTags", "vpx.version.version7", (("dsRef", "vim.Datastore", "vpx.version.version7", 0, None),), (F_OPTIONAL, "string[]", "string[]"), "Global.VCServer", None), ("ReloadStats", "DrsReloadStats", "vpx.version.version7", (), (0, "void", "void"), "Global.VCServer", None), ("GetCurrentOffset", "DrsGetAdditionalOffset", "vpx.version.version7", (), (0, "long", "long"), "Global.VCServer", None), ("GetCurrentRolloverHour", "DrsGetCurrentRolloverHour", "vpx.version.version7", (), (0, "int", "int"), "Global.VCServer", None), ("SendReservationViolationSignal", "SendReservationViolationSignal", "vpx.version.version7", (("ds", "vim.Datastore", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("queryDatastoreCorrelations", "DrsQueryDatastoreCorrelations", "vpx.version.version7", (("ds", "vim.Datastore", "vpx.version.version7", 0, None),("corrType", "vpx.drs.DrsDebugManager.DatastoreCorrelationType", "vpx.version.version7", 0, None),), (F_OPTIONAL, "vim.Datastore[]", "vim.Datastore[]"), "Global.VCServer", None), ("DeleteOMMHost", "DrsDeleteOMMHost", "vpx.version.version7", (("host", "vim.HostSystem", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("RefetchOMMHostBlobs", "DrsRefetchOMMHostBlobs", "vpx.version.version7", (("host", "vim.HostSystem", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("SetVmStats", "DrsSetVmStats", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),("statName", "string", "vpx.version.version7", 0, None),("value", "double", "vpx.version.version7", 0, None),), (0, "void", "void"), "Global.VCServer", None)])
CreateEnumType("vpx.drs.DrsDebugManager.DatastoreCorrelationType", "VpxDrsDrsDebugManagerDatastoreCorrelationType", "vpx.version.version1", ["storageRMOnly", "vasaOnly", "all"])
CreateManagedType("vpx.dvsTester.DvsTestManager", "VpxDvsTesterDvsTestManager", "vmodl.ManagedObject", "vpx.version.legacy", None, [("ForceADvsSync", "DvsTestManagerForceADvsSync", "vpx.version.legacy", (("host", "vim.HostSystem", "vpx.version.legacy", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("TriggerDvsMonitor", "DvsTestManagerTriggerDvsMonitor", "vpx.version.legacy", (), (0, "void", "void"), "Global.VCServer", None), ("VerifyDbPersistence", "DvsTestManagerVerifyDbPersistence", "vpx.version.legacy", (("object", "anyType", "vpx.version.legacy", 0, None),("property", "string", "vpx.version.legacy", 0, None),("dvs", "vim.DistributedVirtualSwitch", "vpx.version.legacy", F_OPTIONAL, None),("dvPg", "vim.dvs.DistributedVirtualPortgroup", "vpx.version.legacy", F_OPTIONAL, None),("dvport", "string", "vpx.version.legacy", F_OPTIONAL, None),("otherObjectId", "string[]", "vpx.version.legacy", F_OPTIONAL, None),), (F_OPTIONAL, "string[]", "string[]"), "Global.VCServer", None)])
CreateDataType("vpx.fault.SecurityConfigFault", "VpxFaultSecurityConfigFault", "vmodl.MethodFault", "vpx.version.version1", None)
CreateDataType("vpx.faultInjector.Action", "VpxFaultInjectorAction", "vmodl.DynamicData", "vpx.version.version1", None)
CreateDataType("vpx.faultInjector.CancelAction", "VpxFaultInjectorCancelAction", "vpx.faultInjector.Action", "vpx.version.version1", None)
CreateDataType("vpx.faultInjector.CrashAction", "VpxFaultInjectorCrashAction", "vpx.faultInjector.Action", "vpx.version.version1", None)
CreateDataType("vpx.faultInjector.ExceptionAction", "VpxFaultInjectorExceptionAction", "vpx.faultInjector.Action", "vpx.version.version1", [("fault", "vmodl.MethodFault", "vpx.version.version1", 0)])
CreateDataType("vpx.faultInjector.Fault", "VpxFaultInjectorFault", "vmodl.DynamicData", "vpx.version.version1", [("key", "int", "vpx.version.version1", 0), ("description", "string", "vpx.version.version1", F_OPTIONAL), ("target", "vpx.faultInjector.Target", "vpx.version.version1", 0), ("trigger", "vpx.faultInjector.Trigger", "vpx.version.version1", 0), ("action", "vpx.faultInjector.Action", "vpx.version.version1", 0)])
CreateManagedType("vpx.faultInjector.FaultInjectionManager", "VpxFaultInjectorFaultInjectionManager", "vmodl.ManagedObject", "vpx.version.version1", [("faults", "vpx.faultInjector.Fault[]", "vpx.version.version1", 0, "Global.VCServer")], [("addFault", "AddFault", "vpx.version.version1", (("fault", "vpx.faultInjector.Fault", "vpx.version.version1", 0, None),), (0, "int", "int"), "Global.VCServer", None), ("removeFault", "RemoveFault", "vpx.version.version1", (("key", "int", "vpx.version.version1", 0, None),), (0, "boolean", "boolean"), "Global.VCServer", None)])
CreateDataType("vpx.faultInjector.Target", "VpxFaultInjectorTarget", "vmodl.DynamicData", "vpx.version.version1", None)
CreateDataType("vpx.faultInjector.TaskTarget", "VpxFaultInjectorTaskTarget", "vpx.faultInjector.Target", "vpx.version.version1", [("target", "vim.Task", "vpx.version.version1", 0)])
CreateDataType("vpx.faultInjector.Trigger", "VpxFaultInjectorTrigger", "vmodl.DynamicData", "vpx.version.version1", None)
CreateDataType("vpx.ft.FtVmInfo", "VpxFtFtVmInfo", "vmodl.DynamicData", "vpx.version.version7", [("role", "int", "vpx.version.version7", 0), ("secondaryVmList", "vpx.ft.FtVmInfo.SecondaryVmData[]", "vpx.version.version7", 0)])
CreateDataType("vpx.ft.FtVmInfo.SecondaryVmData", "VpxFtFtVmInfoSecondaryVmData", "vmodl.DynamicData", "vpx.version.version1", [("vm", "vim.VirtualMachine", "vpx.version.version1", 0), ("host", "vim.HostSystem", "vpx.version.version1", 0), ("instanceUuid", "string", "vpx.version.version1", 0), ("ftEnabled", "boolean", "vpx.version.version1", 0)])
CreateManagedType("vpx.hostPicker.HostPickerManager", "VpxHostPickerHostPickerManager", "vmodl.ManagedObject", "vpx.version.version6", None, [("pickHostForFiles", "PickHostForFiles", "vpx.version.version6", (("paths", "string[]", "vpx.version.version6", 0, None),("dsPathFormat", "boolean", "vpx.version.version6", 0, None),("readWrite", "boolean", "vpx.version.version6", 0, None),("checkLocalNetfsUrl", "boolean", "vpx.version.version6", 0, None),), (0, "vim.HostSystem", "vim.HostSystem"), "Global.VCServer", None), ("pickHostsForFileCopy", "PickHostsForFileCopy", "vpx.version.version6", (("srcDstDsPaths", "vim.KeyValue[]", "vpx.version.version6", 0, None),("readWriteAtSrc", "boolean", "vpx.version.version6", 0, None),), (0, "vim.HostSystem[]", "vim.HostSystem[]"), "Global.VCServer", None)])
CreateManagedType("vpx.inMemLogBufferManager.InMemLogBufferManager", "VpxInMemLogBufferManagerInMemLogBufferManager", "vmodl.ManagedObject", "vpx.version.version6", None, None)
CreateDataType("vpx.methodCounter.MethodCountInfo", "VpxMethodCounterMethodCountInfo", "vmodl.DynamicData", "vpx.version.unstable", [("userName", "string", "vpx.version.unstable", 0), ("methodName", "string", "vpx.version.unstable", 0), ("internal", "boolean", "vpx.version.unstable", 0), ("count", "long", "vpx.version.unstable", 0)])
CreateManagedType("vpx.methodCounter.MethodCounter", "VpxMethodCounterMethodCounter", "vmodl.ManagedObject", "vpx.version.unstable", None, [("Start", "MethodCounterStart", "vpx.version.unstable", (), (0, "void", "void"), "Global.VCServer", None), ("Stop", "MethodCounterStop", "vpx.version.unstable", (), (0, "void", "void"), "Global.VCServer", None), ("Reset", "MethodCounterReset", "vpx.version.unstable", (), (0, "void", "void"), "Global.VCServer", None), ("Get", "MethodCounterGet", "vpx.version.unstable", (("userNameRegex", "string", "vpx.version.unstable", F_OPTIONAL, None),("methodNameRegex", "string", "vpx.version.unstable", F_OPTIONAL, None),("isInternal", "boolean", "vpx.version.unstable", F_OPTIONAL, None),), (F_OPTIONAL, "vpx.methodCounter.MethodCountInfo[]", "vpx.methodCounter.MethodCountInfo[]"), "Global.VCServer", None)])
CreateManagedType("vpx.profile.ClusterComplianceManager", "VpxProfileClusterComplianceManager", "vmodl.ManagedObject", "vpx.version.version1", None, [("checkClusterCompliance", "VpxdCheckClusterCompliance", "vpx.version.version1", (("config", "vim.profile.cluster.ClusterProfile.ConfigInfo", "vpx.version.version1", 0, None),("clusterInfo", "vpx.profile.ClusterInfo", "vpx.version.version1", 0, None),), (0, "vpx.profile.ClusterComplianceManager.ComplianceResultArray", "vpx.profile.ClusterComplianceManager.ComplianceResultArray"), "Global.VCServer", None)])
CreateDataType("vpx.profile.ClusterComplianceManager.ComplianceResultArray", "VpxProfileClusterComplianceManagerComplianceResultArray", "vmodl.DynamicData", "vpx.version.version1", [("complyResult", "vim.profile.ComplianceResult[]", "vpx.version.version1", 0)])
CreateDataType("vpx.profile.ClusterInfo", "VpxProfileClusterInfo", "vmodl.DynamicData", "vpx.version.version1", [("cluster", "vim.ClusterComputeResource", "vpx.version.version1", F_OPTIONAL), ("clusterConfig", "vim.cluster.ConfigInfoEx", "vpx.version.version1", F_OPTIONAL), ("hostInfo", "vim.profile.host.profileEngine.HostInfo[]", "vpx.version.version6", F_OPTIONAL)])
CreateManagedType("vpx.profile.ClusterProfileManager", "VpxProfileClusterProfileManager", "vmodl.ManagedObject", "vpx.version.version1", None, [("createProfileForService", "CreateProfileForService", "vpx.version.version1", (("serviceType", "string[]", "vpx.version.version1", F_OPTIONAL, None),), (0, "vim.profile.cluster.ClusterProfile.ConfigInfo", "vim.profile.cluster.ClusterProfile.ConfigInfo"), "Global.VCServer", None), ("getProfileDescription", "GetClusterProfileDescription", "vpx.version.version1", (("config", "vim.profile.cluster.ClusterProfile.ConfigInfo", "vpx.version.version1", 0, None),), (0, "vim.profile.Profile.Description", "vim.profile.Profile.Description"), "Global.VCServer", None), ("validateClusterProfile", "ValidateClusterProfile", "vpx.version.version1", (("config", "vim.profile.cluster.ClusterProfile.ConfigInfo", "vpx.version.version1", 0, None),), (0, "void", "void"), "Global.VCServer", None)])
CreateEnumType("vpx.profiler.CounterType", "VpxProfilerCounterType", "vpx.version.version1", ["counter64", "gauge64"])
CreateDataType("vpx.profiler.Metadata", "VpxProfilerMetadata", "vmodl.DynamicData", "vpx.version.version1", [("name", "string", "vpx.version.version1", 0), ("type", "vpx.profiler.CounterType", "vpx.version.version1", 0), ("minValue", "long", "vpx.version.version1", F_OPTIONAL), ("maxValue", "long", "vpx.version.version1", F_OPTIONAL)])
CreateManagedType("vpx.profiler.Profiler", "VpxProfilerProfiler", "vmodl.ManagedObject", "vpx.version.version1", [("perfCounterRegistry", "vpx.profiler.Registry", "vpx.version.version1", 0, "Global.VCServer")], [("enableCollection", "EnableCollection", "vpx.version.version1", (("arr", "vmodl.ManagedObject[]", "vpx.version.version1", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("disableCollection", "DisableCollection", "vpx.version.version1", (("arr", "vmodl.ManagedObject[]", "vpx.version.version1", 0, None),), (0, "void", "void"), "Global.VCServer", None), ("getObjectScores", "GetObjectScores", "vpx.version.version1", (), (0, "string", "string"), "Global.VCServer", None), ("getRefTrackerScores", "GetRefTrackerScores", "vpx.version.version1", (), (0, "string", "string"), "Global.VCServer", None), ("getVpxaObjectScores", "GetVpxaObjectScores", "vpx.version.version1", (("host", "vim.HostSystem", "vpx.version.version1", 0, None),), (0, "string", "string"), "Global.VCServer", None), ("getHeapInformation", "GetHeapInformation", "vpx.version.version1", (), (0, "string", "string"), "Global.VCServer", None)])
CreateManagedType("vpx.profiler.Query", "VpxProfilerQuery", "vmodl.ManagedObject", "vpx.version.version1", [("info", "vpx.profiler.Query.Info", "vpx.version.version1", 0, "Global.VCServer")], [("execute", "Execute", "vpx.version.version1", (), (F_OPTIONAL, "vpx.profiler.QueryResult[]", "vpx.profiler.QueryResult[]"), "Global.VCServer", None), ("destroy", "DestroyQuery", "vpx.version.version1", (), (0, "void", "void"), "Global.VCServer", None)])
CreateDataType("vpx.profiler.Query.Info", "VpxProfilerQueryInfo", "vmodl.DynamicData", "vpx.version.version1", None)
CreateDataType("vpx.profiler.Query.NamesInfo", "VpxProfilerQueryNamesInfo", "vpx.profiler.Query.Info", "vpx.version.version1", [("names", "string[]", "vpx.version.version1", F_OPTIONAL)])
CreateDataType("vpx.profiler.Query.RegexInfo", "VpxProfilerQueryRegexInfo", "vpx.profiler.Query.Info", "vpx.version.version1", [("regex", "string", "vpx.version.version1", 0), ("caseSensitive", "boolean", "vpx.version.version1", 0)])
CreateDataType("vpx.profiler.QueryResult", "VpxProfilerQueryResult", "vmodl.DynamicData", "vpx.version.version1", [("metadata", "vpx.profiler.Metadata", "vpx.version.version1", 0), ("value", "long", "vpx.version.version1", F_OPTIONAL)])
CreateManagedType("vpx.profiler.Registry", "VpxProfilerRegistry", "vmodl.ManagedObject", "vpx.version.version1", [("query", "vpx.profiler.Query[]", "vpx.version.version1", 0, "Global.VCServer")], [("enumeratePath", "EnumeratePath", "vpx.version.version1", (("path", "string", "vpx.version.version1", 0, None),), (F_OPTIONAL, "string[]", "string[]"), "Global.VCServer", None), ("createNamesQuery", "CreateNamesQuery", "vpx.version.version1", (("names", "string[]", "vpx.version.version1", F_OPTIONAL, None),), (0, "vpx.profiler.Query", "vpx.profiler.Query"), "Global.VCServer", None), ("createRegexQuery", "CreateRegexQuery", "vpx.version.version1", (("regex", "string", "vpx.version.version1", 0, None),("caseSensitive", "boolean", "vpx.version.version1", 0, None),), (0, "vpx.profiler.Query", "vpx.profiler.Query"), "Global.VCServer", None), ("clearAll", "ClearAll", "vpx.version.version1", (), (0, "void", "void"), "Global.VCServer", None)])
CreateDataType("vpx.vmcheck.CompResState", "VpxVmcheckCompResState", "vmodl.DynamicData", "vpx.version.version10", [("ref", "vim.ComputeResource", "vpx.version.version10", 0), ("name", "string", "vpx.version.version10", 0), ("cluster", "boolean", "vpx.version.version10", 0), ("config", "vim.ComputeResource.ConfigInfo", "vpx.version.version10", 0), ("EVCMode", "vim.EVCMode", "vpx.version.version10", F_OPTIONAL), ("dasEnabled", "boolean", "vpx.version.version10", 0), ("dasAdmissionEnabled", "boolean", "vpx.version.version10", 0), ("maxFtVmsPerHost", "int", "vpx.version.version10", 0), ("vdcId", "string", "vpx.version.version10", 0), ("maxFtVcpusPerHost", "int", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.DatacenterState", "VpxVmcheckDatacenterState", "vmodl.DynamicData", "vpx.version.version10", [("ref", "vim.Datacenter", "vpx.version.version10", 0), ("name", "string", "vpx.version.version10", 0), ("datastores", "vim.Datastore[]", "vpx.version.stable", F_OPTIONAL), ("networks", "vim.Network[]", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.DatastoreState", "VpxVmcheckDatastoreState", "vmodl.DynamicData", "vpx.version.version10", [("ref", "vim.Datastore", "vpx.version.version10", 0), ("summary", "vim.Datastore.Summary", "vpx.version.version10", 0), ("info", "vim.Datastore.Info", "vpx.version.version10", 0), ("capability", "vim.Datastore.Capability", "vpx.version.version10", 0), ("host", "vim.Datastore.HostMount[]", "vpx.version.version10", F_OPTIONAL), ("datacenterRef", "vim.Datacenter", "vpx.version.version10", 0), ("datacenterName", "string", "vpx.version.version10", 0), ("pMem", "boolean", "vpx.version.stable", F_OPTIONAL), ("active", "boolean", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.DvsState", "VpxVmcheckDvsState", "vmodl.DynamicData", "vpx.version.version10", [("ref", "vim.DistributedVirtualSwitch", "vpx.version.version10", 0), ("uuid", "string", "vpx.version.version10", 0), ("productInfo", "vim.dvs.ProductSpec", "vpx.version.version10", 0), ("configInfo", "vim.DistributedVirtualSwitch.ConfigInfo", "vpx.version.stable", F_OPTIONAL), ("dvsResRuntime", "vim.DistributedVirtualSwitch.ResourceRuntimeInfo", "vpx.version.stable", F_OPTIONAL), ("dvpgStates", "vpx.vmcheck.DvsState.DvpgState[]", "vpx.version.stable", F_OPTIONAL), ("hybridModeEnabled", "boolean", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.DvsState.DvpgState", "VpxVmcheckDvsStateDvpgState", "vmodl.DynamicData", "vpx.version.stable", [("pgKey", "string", "vpx.version.stable", 0), ("pgName", "string", "vpx.version.stable", 0), ("dvpgRef", "vim.dvs.DistributedVirtualPortgroup", "vpx.version.stable", 0), ("nrpKey", "string", "vpx.version.stable", 0)])
CreateDataType("vpx.vmcheck.HostState", "VpxVmcheckHostState", "vmodl.DynamicData", "vpx.version.version10", [("ref", "vim.HostSystem", "vpx.version.version10", 0), ("hostIp", "string", "vpx.version.version10", 0), ("hostSslThumbprint", "string", "vpx.version.version10", 0), ("hostCapability", "vim.host.Capability", "vpx.version.version10", 0), ("hostInternalCapability", "vim.host.InternalCapability", "vpx.version.version10", 0), ("hostName", "string", "vpx.version.version10", 0), ("hostConfig", "vim.host.ConfigInfo", "vpx.version.version10", F_OPTIONAL), ("hostDvsStatus", "vpx.vmcheck.HostState.JoinedDvsStatus[]", "vpx.version.version10", F_OPTIONAL), ("datacenterRef", "vim.Datacenter", "vpx.version.version10", 0), ("compResRef", "vim.ComputeResource", "vpx.version.version10", 0), ("runtime", "vim.host.RuntimeInfo", "vpx.version.version10", F_OPTIONAL), ("hostHardwareInfo", "vim.host.HardwareInfo", "vpx.version.version10", F_OPTIONAL), ("servicesProvidedArray", "string[]", "vpx.version.version10", F_OPTIONAL), ("vMotionLicensed", "boolean", "vpx.version.version10", 0), ("xvcLicensingFault", "vmodl.MethodFault", "vpx.version.version10", F_OPTIONAL), ("hostUsingMockupFeatures", "boolean", "vpx.version.version10", 0), ("evcMode", "vim.EVCMode", "vpx.version.version10", F_OPTIONAL), ("vMotionVNics", "vim.host.VirtualNic[]", "vpx.version.version10", F_OPTIONAL), ("managementVNics", "vim.host.VirtualNic[]", "vpx.version.version10", F_OPTIONAL), ("dasState", "int", "vpx.version.version10", 0), ("pMemDatastoreRef", "vim.Datastore", "vpx.version.stable", F_OPTIONAL), ("numRegisteredVMs", "int", "vpx.version.stable", F_OPTIONAL), ("pMemAvailRsrvMB", "int", "vpx.version.stable", F_OPTIONAL), ("vmConfigOptions", "vim.vm.ConfigOption[]", "vpx.version.stable", F_OPTIONAL), ("enteringMaintenanceMode", "boolean", "vpx.version.stable", F_OPTIONAL), ("networks", "vim.Network[]", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.HostState.JoinedDvsStatus", "VpxVmcheckHostStateJoinedDvsStatus", "vmodl.DynamicData", "vpx.version.version10", [("dvsRef", "vim.DistributedVirtualSwitch", "vpx.version.version10", 0), ("status", "string", "vpx.version.version10", 0), ("hasUplinks", "boolean", "vpx.version.version10", 0)])
CreateDataType("vpx.vmcheck.NetworkState", "VpxVmcheckNetworkState", "vmodl.DynamicData", "vpx.version.stable", [("ref", "vim.Network", "vpx.version.stable", 0), ("name", "string", "vpx.version.stable", 0), ("opaqueNetwork", "boolean", "vpx.version.stable", 0), ("networkId", "string", "vpx.version.stable", 0), ("capability", "vim.OpaqueNetwork.Capability", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.VmState", "VpxVmcheckVmState", "vmodl.DynamicData", "vpx.version.version10", [("ref", "vim.VirtualMachine", "vpx.version.version10", 0), ("powerState", "vim.VirtualMachine.PowerState", "vpx.version.version10", 0), ("config", "vim.vm.ConfigInfo", "vpx.version.version10", 0), ("layout", "vim.vm.FileLayout", "vpx.version.version10", 0), ("layoutEx", "vim.vm.FileLayoutEx", "vpx.version.version10", 0), ("capability", "vim.vm.Capability", "vpx.version.version10", 0), ("markedAsTemplate", "boolean", "vpx.version.version10", 0), ("snapshot", "vim.vm.SnapshotInfo", "vpx.version.version10", F_OPTIONAL), ("runtime", "vim.vm.RuntimeInfo", "vpx.version.version10", 0), ("guestInfo", "vim.vm.GuestInfo", "vpx.version.version10", F_OPTIONAL), ("cpuFeatureMask", "vim.host.CpuIdInfo[]", "vpx.version.version10", F_OPTIONAL), ("guestHeartbeatStatus", "vim.ManagedEntity.Status", "vpx.version.version10", 0), ("resourceConfigSpec", "vim.ResourceConfigSpec", "vpx.version.version10", F_OPTIONAL), ("servicesRequiredArray", "string[]", "vpx.version.version10", F_OPTIONAL), ("usingAlternateSrcHost", "boolean", "vpx.version.version10", 0), ("disabledSnapshotMethods", "int", "vpx.version.version10", 0), ("networkNames", "string[]", "vpx.version.version10", F_OPTIONAL), ("dvPortgroupNames", "string[]", "vpx.version.version10", F_OPTIONAL), ("dvSwitchNames", "string[]", "vpx.version.version10", F_OPTIONAL), ("datastoreRefs", "vim.Datastore[]", "vpx.version.version10", F_OPTIONAL), ("primaryDatastoreRef", "vim.Datastore", "vpx.version.version10", F_OPTIONAL), ("snapshotDatastoreRef", "vim.Datastore", "vpx.version.version10", F_OPTIONAL), ("suspendDatastoreRef", "vim.Datastore", "vpx.version.version10", F_OPTIONAL), ("hostRef", "vim.HostSystem", "vpx.version.version10", 0), ("ftPrimary", "boolean", "vpx.version.version10", 0), ("srmProtected", "boolean", "vpx.version.version10", 0), ("sharedDisks", "int[]", "vpx.version.version12", F_OPTIONAL), ("changeHomeAllowed", "boolean", "vpx.version.stable", F_OPTIONAL), ("pMemUpgradeDisks", "int[]", "vpx.version.stable", F_OPTIONAL), ("pMemDisks", "int[]", "vpx.version.stable", F_OPTIONAL), ("permissions", "vim.AuthorizationManager.Permission[]", "vpx.version.stable", F_OPTIONAL), ("failedPermissions", "vim.AuthorizationManager.Permission[]", "vpx.version.stable", F_OPTIONAL), ("pMemTargetCloneOrXHostMB", "int", "vpx.version.stable", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.Action", "VpxVmprovAction", "vmodl.ManagedObject", "vpx.version.version7", [("name", "string", "vpx.version.version7", 0, None), ("inputType", "vmodl.TypeName[]", "vpx.version.version7", 0, None)], [("retrieveInfo", "RetrieveActionInfo", "vpx.version.version10", (("input", "vpx.vmprov.Action.Input", "vpx.version.version10", 0, None),), (0, "vpx.vmprov.Action.Info", "vpx.vmprov.Action.Info"), None, None), ("execute", "ActionExecute", "vpx.version.version7", (("input", "vpx.vmprov.Action.Input", "vpx.version.version7", 0, None),), (0, "vpx.vmprov.Action.Result", "vpx.vmprov.Action.Result"), None, None), ("taskDone", "ActionTaskDone", "vpx.version.version8", (("tasksTracked", "vpx.vmprov.TaskTrackingInfo[]", "vpx.version.version8", 0, None),), (0, "void", "void"), None, None)])
CreateDataType("vpx.vmprov.Action.Output", "VpxVmprovActionOutput", "vmodl.DynamicData", "vpx.version.version7", None)
CreateDataType("vpx.vmprov.Action.Input", "VpxVmprovActionInput", "vmodl.DynamicData", "vpx.version.version7", [("context", "vpx.vmprov.Context", "vpx.version.version7", 0), ("contribution", "int", "vpx.version.version7", F_OPTIONAL), ("remote", "boolean", "vpx.version.version7", F_OPTIONAL)])
CreateDataType("vpx.vmprov.Action.NextAction", "VpxVmprovActionNextAction", "vmodl.DynamicData", "vpx.version.version7", [("actionType", "vmodl.TypeName", "vpx.version.version7", 0), ("contribution", "int", "vpx.version.version7", F_OPTIONAL), ("remote", "boolean", "vpx.version.version7", F_OPTIONAL)])
CreateDataType("vpx.vmprov.Action.CancelableOption", "VpxVmprovActionCancelableOption", "vmodl.DynamicData", "vpx.version.version7", [("cancelable", "boolean", "vpx.version.version7", 0), ("checkCanceled", "boolean", "vpx.version.version7", 0)])
CreateDataType("vpx.vmprov.Action.Result", "VpxVmprovActionResult", "vmodl.DynamicData", "vpx.version.version7", [("context", "vpx.vmprov.Context", "vpx.version.version7", F_OPTIONAL), ("output", "vpx.vmprov.Action.Output[]", "vpx.version.version7", F_OPTIONAL), ("nextAction", "vpx.vmprov.Action.NextAction[]", "vpx.version.version7", F_OPTIONAL), ("earlyTerminate", "boolean", "vpx.version.version7", 0), ("cancelableOption", "vpx.vmprov.Action.CancelableOption", "vpx.version.version7", F_OPTIONAL), ("tasksToTrack", "vpx.vmprov.TaskTrackingInfo[]", "vpx.version.version8", F_OPTIONAL)])
CreateDataType("vpx.vmprov.Action.Info", "VpxVmprovActionInfo", "vmodl.DynamicData", "vpx.version.version10", [("contribution", "int", "vpx.version.version10", 0), ("committed", "boolean", "vpx.version.version10", 0), ("remote", "boolean", "vpx.version.version10", 0)])
CreateManagedType("vpx.vmprov.ActionFactory", "VpxVmprovActionFactory", "vmodl.ManagedObject", "vpx.version.version7", None, [("createAction", "CreateAction", "vpx.version.version7", (("actionType", "string", "vpx.version.version7", 0, None),), (0, "vpx.vmprov.Action", "vpx.vmprov.Action"), None, None), ("destroyAction", "DestroyAction", "vpx.version.version7", (("action", "vpx.vmprov.Action", "vpx.version.version7", 0, None),), (0, "void", "void"), None, None), ("createVmContext", "CreateVmContext", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),), (0, "vpx.vmprov.VmContext", "vpx.vmprov.VmContext"), None, None), ("createMigrateContext", "CreateMigrateContext", "vpx.version.version7", (("vm", "vim.VirtualMachine", "vpx.version.version7", 0, None),("spec", "vim.vm.RelocateSpec", "vpx.version.version7", 0, None),("priority", "vim.VirtualMachine.MovePriority", "vpx.version.version7", 0, None),("drmRecommended", "boolean", "vpx.version.version7", 0, None),), (0, "vpx.vmprov.MigrateContext", "vpx.vmprov.MigrateContext"), None, None)])
CreateManagedType("vpx.vmprov.ActionHandler", "VpxVmprovActionHandler", "vmodl.ManagedObject", "vpx.version.version10", None, [("preExecute", "PreExecute", "vpx.version.version10", (("actionName", "string", "vpx.version.version10", 0, None),("actionInfo", "vpx.vmprov.Action.Info", "vpx.version.version10", 0, None),("actionInput", "vpx.vmprov.Action.Input", "vpx.version.version10", 0, None),), (0, "void", "void"), None, None), ("postExecute", "PostExecute", "vpx.version.version10", (("actionName", "string", "vpx.version.version10", 0, None),("actionInfo", "vpx.vmprov.Action.Info", "vpx.version.version10", 0, None),("actionInput", "vpx.vmprov.Action.Input", "vpx.version.version10", 0, None),("actionResult", "vpx.vmprov.Action.Result", "vpx.version.version10", 0, None),), (0, "void", "void"), None, None)])
CreateManagedType("vpx.vmprov.CheckCompatibility", "VpxVmprovCheckCompatibility", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CheckDestinationFiles", "VpxVmprovCheckDestinationFiles", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CheckPermission", "VpxVmprovCheckPermission", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CleanupSourceVm", "VpxVmprovCleanupSourceVm", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CompleteDestination", "VpxVmprovCompleteDestination", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CompleteSource", "VpxVmprovCompleteSource", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.ComputeSpecs", "VpxVmprovComputeSpecs", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.ComputeSpecs.CopySpecOutput", "VpxVmprovComputeSpecsCopySpecOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("copySpec", "nfc.CopySpec[]", "vpx.version.version7", F_OPTIONAL), ("srcCopySpec", "nfc.CopySpec[]", "vpx.version.version12", F_OPTIONAL), ("dstCopySpec", "nfc.CopySpec[]", "vpx.version.version12", F_OPTIONAL), ("disksReparentAwayFrom", "string[]", "vpx.version.version7", F_OPTIONAL)])
CreateDataType("vpx.vmprov.ComputeSpecs.VMotionSpecOutput", "VpxVmprovComputeSpecsVMotionSpecOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("vmotionSpec", "vim.host.VMotionManager.Spec", "vpx.version.version7", 0)])
CreateDataType("vpx.vmprov.ComputeSpecs.ConfigSpecOutput", "VpxVmprovComputeSpecsConfigSpecOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("configSpec", "vim.vm.ConfigSpec", "vpx.version.version7", 0), ("registerVm", "boolean", "vpx.version.version7", 0)])
CreateDataType("vpx.vmprov.ComputeSpecs.SnapshotLayoutSpecOutput", "VpxVmprovComputeSpecsSnapshotLayoutSpecOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("layoutSpec", "vim.host.LowLevelProvisioningManager.SnapshotLayoutSpec[]", "vpx.version.version7", 0)])
CreateDataType("vpx.vmprov.Context", "VpxVmprovContext", "vmodl.DynamicData", "vpx.version.version7", [("cbData", "vmodl.KeyAnyValue[]", "vpx.version.version7", F_OPTIONAL), ("prevOutput", "vpx.vmprov.Action.Output[]", "vpx.version.version7", F_OPTIONAL)])
CreateDataType("vpx.vmprov.CreateContext", "VpxVmprovCreateContext", "vpx.vmprov.Context", "vpx.version.version7", [("spec", "vim.vm.ConfigSpec", "vpx.version.version7", 0), ("dstLocation", "vpx.vmprov.VmLocation", "vpx.version.version7", 0), ("noFolderOk", "boolean", "vpx.version.version7", 0), ("dstVm", "vim.VirtualMachine", "vpx.version.version7", F_OPTIONAL), ("macAssignmentData", "string[]", "vpx.version.version7", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.CustomizeVm", "VpxVmprovCustomizeVm", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.DatastoreState", "VpxVmprovDatastoreState", "vmodl.DynamicData", "vpx.version.version7", [("datastore", "vim.Datastore", "vpx.version.version7", 0), ("summary", "vim.Datastore.Summary", "vpx.version.version7", 0), ("capability", "vim.Datastore.Capability", "vpx.version.version8", 0)])
CreateDataType("vpx.vmprov.HostState", "VpxVmprovHostState", "vmodl.DynamicData", "vpx.version.version7", [("host", "vim.HostSystem", "vpx.version.version7", 0), ("product", "vim.AboutInfo", "vpx.version.version7", 0), ("uuid", "string", "vpx.version.version7", 0), ("managementIp", "string", "vpx.version.version7", 0), ("cnxSpec", "nfc.CopySpec.CnxSpec", "vpx.version.version7", 0), ("sslThumbprint", "string", "vpx.version.version7", 0), ("capability", "vim.host.Capability", "vpx.version.version7", 0), ("internalCapability", "vim.host.InternalCapability", "vpx.version.version7", 0), ("vmSwapPlacement", "string", "vpx.version.version7", 0), ("localSwapDatastore", "vpx.vmprov.DatastoreState", "vpx.version.version7", F_OPTIONAL), ("localSwapDatastoreWritable", "boolean", "vpx.version.version7", F_OPTIONAL), ("configOption", "vim.vm.ConfigOption", "vpx.version.version7", F_OPTIONAL), ("mountInfo", "vim.host.MountInfo[]", "vpx.version.version7", F_OPTIONAL), ("vNicInfo", "vim.host.VirtualNicManagerInfo", "vpx.version.version7", F_OPTIONAL), ("network", "vim.host.NetworkInfo", "vpx.version.version7", F_OPTIONAL), ("optionDef", "vim.option.OptionDef[]", "vpx.version.version7", F_OPTIONAL), ("provPolicy", "vim.vm.ProvisioningPolicy", "vpx.version.version7", F_OPTIONAL), ("vFlashModules", "vim.host.VFlashManager.VFlashCacheConfigInfo.VFlashModuleConfigOption[]", "vpx.version.version10", F_OPTIONAL), ("vFlashResourceAccessible", "boolean", "vpx.version.version10", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.InvokePrechecks", "VpxVmprovInvokePrechecks", "vpx.vmprov.Action", "vpx.version.version10", None, None)
CreateManagedType("vpx.vmprov.MarkAsTemplate", "VpxVmprovMarkAsTemplate", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.PowerOnVm", "VpxVmprovPowerOnVm", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.ReconfigureContext", "VpxVmprovReconfigureContext", "vpx.vmprov.Context", "vpx.version.version12", [("configSpec", "vim.vm.ConfigSpec", "vpx.version.version12", 0), ("vm", "vim.VirtualMachine", "vpx.version.version12", 0), ("location", "vpx.vmprov.VmLocation", "vpx.version.version12", 0), ("macAssignmentData", "string[]", "vpx.version.version12", F_OPTIONAL), ("configInfo", "vim.vm.ConfigInfo", "vpx.version.version12", 0)])
CreateDataType("vpx.vmprov.ReconfigureContext.NicInfo", "VpxVmprovReconfigureContextNicInfo", "vmodl.DynamicData", "vpx.version.version12", [("deviceKey", "int", "vpx.version.version12", 0), ("backing", "vim.Network", "vpx.version.version12", 0)])
CreateDataType("vpx.vmprov.RegisterContext", "VpxVmprovRegisterContext", "vpx.vmprov.Context", "vpx.version.version7", [("vmName", "string", "vpx.version.version7", F_OPTIONAL), ("vmPathName", "string", "vpx.version.version7", 0), ("dstLocation", "vpx.vmprov.VmLocation", "vpx.version.version7", 0), ("isTemplate", "boolean", "vpx.version.version7", 0), ("requiredKey", "vim.encryption.CryptoKeyId[]", "vpx.version.version12", F_OPTIONAL), ("dstVm", "vim.VirtualMachine", "vpx.version.version7", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.RelayoutSnapshot", "VpxVmprovRelayoutSnapshot", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.RemoteUtilities", "VpxVmprovRemoteUtilities", "vmodl.ManagedObject", "vpx.version.stable", [("supportedProtocolVersions", "int[]", "vpx.version.stable", F_OPTIONAL, "System.View"), ("capabilities", "vpx.vmprov.RemoteUtilities.Capabilities", "vpx.version.stable", F_OPTIONAL, "System.View")], None)
CreateDataType("vpx.vmprov.RemoteUtilities.Capabilities", "VpxVmprovRemoteUtilitiesCapabilities", "vmodl.DynamicData", "vpx.version.stable", [("provFeatures", "vpx.vmprov.RemoteUtilities.Capabilities.ProvFeatures", "vpx.version.stable", F_OPTIONAL), ("vcFeatures", "vpx.vmprov.RemoteUtilities.Capabilities.VCFeatures", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.RemoteUtilities.Capabilities.ProvFeatures", "VpxVmprovRemoteUtilitiesCapabilitiesProvFeatures", "vmodl.DynamicData", "vpx.version.stable", [("action_ResourceReservation", "boolean", "vpx.version.stable", 0), ("action_MarkOperationInProgress", "boolean", "vpx.version.stable", 0), ("action_RetrieveState", "boolean", "vpx.version.stable", F_OPTIONAL), ("operation_DeltaMigration", "boolean", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.RemoteUtilities.Capabilities.VCFeatures", "VpxVmprovRemoteUtilitiesCapabilitiesVCFeatures", "vmodl.DynamicData", "vpx.version.stable", [("encryptedVMotion", "boolean", "vpx.version.stable", 0), ("ha_restartOrchestration", "boolean", "vpx.version.stable", 0), ("instantClone", "boolean", "vpx.version.stable", 0), ("vmCrypt", "boolean", "vpx.version.stable", 0)])
CreateManagedType("vpx.vmprov.RemoveSnapshot", "VpxVmprovRemoveSnapshot", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.ResourceReservation", "VpxVmprovResourceReservation", "vpx.vmprov.Action", "vpx.version.version12", None, None)
CreateManagedType("vpx.vmprov.SelectDestination", "VpxVmprovSelectDestination", "vpx.vmprov.Action", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.SelectDestination.Output", "VpxVmprovSelectDestinationOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("changedDatastore", "vim.Datastore[]", "vpx.version.version7", F_OPTIONAL), ("newDatastore", "vpx.vmprov.DatastoreState[]", "vpx.version.version7", F_OPTIONAL)])
CreateDataType("vpx.vmprov.ServiceEndpointState", "VpxVmprovServiceEndpointState", "vmodl.DynamicData", "vpx.version.version10", [("instanceName", "string", "vpx.version.version10", 0), ("url", "string", "vpx.version.version10", 0), ("about", "vim.AboutInfo", "vpx.version.version10", 0)])
CreateDataType("vpx.vmprov.SnapshotState", "VpxVmprovSnapshotState", "vmodl.DynamicData", "vpx.version.version7", [("snapshot", "vim.vm.Snapshot", "vpx.version.version7", 0), ("name", "string", "vpx.version.version7", 0), ("id", "int", "vpx.version.version7", 0), ("config", "vim.vm.ConfigInfo", "vpx.version.version7", 0), ("childSnapshot", "vpx.vmprov.SnapshotState[]", "vpx.version.version7", F_OPTIONAL)])
CreateDataType("vpx.vmprov.TaskTrackingInfo", "VpxVmprovTaskTrackingInfo", "vmodl.DynamicData", "vpx.version.version8", [("task", "vim.Task", "vpx.version.version8", 0), ("host", "vim.HostSystem", "vpx.version.version8", 0), ("contribution", "int", "vpx.version.version8", 0), ("abortOnFailure", "boolean", "vpx.version.version8", 0), ("result", "anyType", "vpx.version.version8", F_OPTIONAL), ("error", "vmodl.MethodFault", "vpx.version.version8", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.UndoableAction", "VpxVmprovUndoableAction", "vpx.vmprov.Action", "vpx.version.version7", [("idempotent", "boolean", "vpx.version.version7", 0, None)], [("undo", "Undo", "vpx.version.version7", (("input", "vpx.vmprov.UndoableAction.UndoInput", "vpx.version.version7", 0, None),), (0, "boolean", "boolean"), None, None)])
CreateDataType("vpx.vmprov.UndoableAction.UndoInput", "VpxVmprovUndoableActionUndoInput", "vpx.vmprov.Action.Input", "vpx.version.version7", [("fault", "vmodl.MethodFault", "vpx.version.version7", F_OPTIONAL), ("serverRestart", "boolean", "vpx.version.version7", 0), ("serverRestore", "boolean", "vpx.version.version11", F_OPTIONAL)])
CreateDataType("vpx.vmprov.UndoableAction.UndoInfo", "VpxVmprovUndoableActionUndoInfo", "vpx.vmprov.Action.Info", "vpx.version.version10", [("earlyJournalize", "boolean", "vpx.version.version10", 0), ("undoHost", "vim.HostSystem", "vpx.version.version10", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.UnregisterSourceVm", "VpxVmprovUnregisterSourceVm", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.UpdateVmPath", "VpxVmprovUpdateVmPath", "vpx.vmprov.UndoableAction", "vpx.version.version12", None, None)
CreateDataType("vpx.vmprov.VmContext", "VpxVmprovVmContext", "vpx.vmprov.Context", "vpx.version.version7", [("srcVmState", "vpx.vmprov.VmState", "vpx.version.version7", 0), ("srcLocation", "vpx.vmprov.VmLocation", "vpx.version.version7", 0)])
CreateDataType("vpx.vmprov.VmLocation", "VpxVmprovVmLocation", "vmodl.DynamicData", "vpx.version.version7", [("service", "vpx.vmprov.ServiceEndpointState", "vpx.version.version10", 0), ("datacenter", "vim.Datacenter", "vpx.version.version7", 0), ("folder", "vim.Folder", "vpx.version.version7", F_OPTIONAL), ("computeResource", "vim.ComputeResource", "vpx.version.version7", 0), ("pool", "vim.ResourcePool", "vpx.version.version7", 0), ("host", "vpx.vmprov.HostState", "vpx.version.version7", 0), ("primaryDatastore", "vpx.vmprov.DatastoreState", "vpx.version.version7", 0), ("datastore", "vpx.vmprov.DatastoreState[]", "vpx.version.version7", 0)])
CreateDataType("vpx.vmprov.VmPowerOnContext", "VpxVmprovVmPowerOnContext", "vpx.vmprov.Context", "vpx.version.version10", [("host", "vim.HostSystem", "vpx.version.version10", 0), ("computeRes", "vim.ComputeResource", "vpx.version.version10", 0), ("cluster", "boolean", "vpx.version.version10", 0), ("contributionPercent", "int", "vpx.version.version10", 0), ("vm", "vim.VirtualMachine", "vpx.version.version10", 0), ("drsAction", "boolean", "vpx.version.version10", 0), ("secondaryAttemptedVmInfo", "vim.cluster.AttemptedVmInfo", "vpx.version.version10", F_OPTIONAL), ("drsActionFtInfo", "vpx.drs.DrmFtVmPowerOnInfo", "vpx.version.version10", F_OPTIONAL)])
CreateDataType("vpx.vmprov.VmState", "VpxVmprovVmState", "vmodl.DynamicData", "vpx.version.version7", [("vm", "vim.VirtualMachine", "vpx.version.version7", 0), ("vmPathName", "string", "vpx.version.version7", 0), ("powerState", "vim.VirtualMachine.PowerState", "vpx.version.version7", 0), ("config", "vim.vm.ConfigInfo", "vpx.version.version7", 0), ("layoutEx", "vim.vm.FileLayoutEx", "vpx.version.version7", 0), ("capability", "vim.vm.Capability", "vpx.version.version7", 0), ("rootSnapshot", "vpx.vmprov.SnapshotState[]", "vpx.version.version7", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.Workflow", "VpxVmprovWorkflow", "vmodl.ManagedObject", "vpx.version.version10", None, [("execute", "WorkflowExecute_Task", "vpx.version.version10", (("actionType", "string", "vpx.version.version10", 0, None),("input", "vpx.vmprov.Action.Input", "vpx.version.version10", 0, None),), (0, "vim.Task", "vpx.vmprov.Action.Result"), None, None), ("abort", "WorkflowAbort_Task", "vpx.version.version10", (("fault", "vmodl.MethodFault", "vpx.version.version10", 0, None),), (0, "vim.Task", "void"), None, None), ("commit", "WorkflowCommit_Task", "vpx.version.version10", (("context", "vpx.vmprov.Context", "vpx.version.version12", F_OPTIONAL, None),), (0, "vim.Task", "void"), None, None), ("destroy", "WorkflowDestroy_Task", "vpx.version.version10", (), (0, "vim.Task", "void"), None, None), ("keepAlive", "WorkflowKeepalive", "vpx.version.version10", (), (0, "void", "void"), None, None)])
CreateManagedType("vpx.vmprov.WorkflowManager", "VpxVmprovWorkflowManager", "vmodl.ManagedObject", "vpx.version.version10", None, [("createWorkflow", "CreateWorkflow", "vpx.version.version10", (("ctx", "vpx.vmprov.Context", "vpx.version.version10", 0, None),), (0, "vpx.vmprov.Workflow", "vpx.vmprov.Workflow"), None, None)])
CreateDataType("vpx.faultInjector.NameTarget", "VpxFaultInjectorNameTarget", "vpx.faultInjector.Target", "vpx.version.version1", [("name", "string", "vpx.version.version1", 0)])
CreateDataType("vpx.faultInjector.ProgressTrigger", "VpxFaultInjectorProgressTrigger", "vpx.faultInjector.Trigger", "vpx.version.version1", [("percent", "int", "vpx.version.version1", 0)])
CreateManagedType("vpx.vmcheck.CheckProvision", "VpxVmcheckCheckProvision", "vpx.vmprov.Action", "vpx.version.version10", None, None)
CreateDataType("vpx.vmcheck.CheckProvision.CheckState", "VpxVmcheckCheckProvisionCheckState", "vpx.vmprov.Action.Output", "vpx.version.version10", [("vm", "vpx.vmcheck.VmState", "vpx.version.version10", 0), ("host", "vpx.vmcheck.HostState", "vpx.version.version10", 0), ("compRes", "vpx.vmcheck.CompResState", "vpx.version.version10", 0), ("datacenter", "vpx.vmcheck.DatacenterState", "vpx.version.version10", 0), ("datastore", "vpx.vmcheck.DatastoreState[]", "vpx.version.version10", F_OPTIONAL), ("dvs", "vpx.vmcheck.DvsState[]", "vpx.version.version10", F_OPTIONAL), ("testType", "string[]", "vpx.version.version10", F_OPTIONAL), ("validatePmemLocators", "boolean", "vpx.version.stable", F_OPTIONAL), ("network", "vpx.vmcheck.NetworkState[]", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.CheckProvision.DstCheckState", "VpxVmcheckCheckProvisionDstCheckState", "vpx.vmprov.Action.Output", "vpx.version.stable", [("vm", "vpx.vmcheck.VmState", "vpx.version.stable", 0), ("hosts", "vpx.vmcheck.HostState[]", "vpx.version.stable", F_OPTIONAL), ("compRes", "vpx.vmcheck.CompResState", "vpx.version.stable", 0), ("datacenter", "vpx.vmcheck.DatacenterState", "vpx.version.stable", 0), ("datastore", "vpx.vmcheck.DatastoreState[]", "vpx.version.stable", F_OPTIONAL), ("dvs", "vpx.vmcheck.DvsState[]", "vpx.version.stable", F_OPTIONAL), ("network", "vpx.vmcheck.NetworkState[]", "vpx.version.stable", F_OPTIONAL), ("hybridVMotionBlocked", "boolean", "vpx.version.stable", 0), ("hybridCloneBlocked", "boolean", "vpx.version.stable", 0)])
CreateDataType("vpx.vmcheck.CheckProvisionContext", "VpxVmcheckCheckProvisionContext", "vpx.vmprov.Context", "vpx.version.version10", [("result", "vim.vm.check.Result[]", "vpx.version.version10", F_OPTIONAL), ("srcVcReleaseVersion", "long", "vpx.version.stable", F_OPTIONAL), ("srcVcBuild", "long", "vpx.version.stable", F_OPTIONAL), ("srcVcCap", "vpx.vmprov.RemoteUtilities.Capabilities", "vpx.version.stable", F_OPTIONAL), ("negotiatedProtocolVersion", "int", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.CheckRelocateContext", "VpxVmcheckCheckRelocateContext", "vpx.vmcheck.CheckProvisionContext", "vpx.version.version10", [("relocateSpec", "vim.vm.RelocateSpec", "vpx.version.version10", 0)])
CreateManagedType("vpx.vmcheck.RetrieveState", "VpxVmcheckRetrieveState", "vpx.vmprov.Action", "vpx.version.stable", None, None)
CreateDataType("vpx.vmprov.CheckinContext", "VpxVmprovCheckinContext", "vpx.vmprov.Context", "vpx.version.unstable", [("checkinSpec", "vim.vm.CheckinSpec", "vpx.version.unstable", 0), ("vm", "vim.VirtualMachine", "vpx.version.unstable", 0)])
CreateManagedType("vpx.vmprov.CopyVmFiles", "VpxVmprovCopyVmFiles", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CreateDestinationVm", "VpxVmprovCreateDestinationVm", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CreateDummyVMotionDisks", "VpxVmprovCreateDummyVMotionDisks", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CreateInventoryVm", "VpxVmprovCreateInventoryVm", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.CreateSnapshot", "VpxVmprovCreateSnapshot", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.FinallyAction", "VpxVmprovFinallyAction", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, [("finalize", "Finalize", "vpx.version.version7", (("input", "vpx.vmprov.UndoableAction.UndoInput", "vpx.version.version7", 0, None),), (0, "void", "void"), None, None)])
CreateManagedType("vpx.vmprov.GenerateNvram", "VpxVmprovGenerateNvram", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.InitiateDestination", "VpxVmprovInitiateDestination", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.InitiateDestination.Output", "VpxVmprovInitiateDestinationOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("dstId", "int", "vpx.version.version7", 0), ("task", "vim.Task", "vpx.version.version7", 0), ("host", "vim.HostSystem", "vpx.version.version7", 0)])
CreateManagedType("vpx.vmprov.InitiateSource", "VpxVmprovInitiateSource", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.InvokeCallbacks", "VpxVmprovInvokeCallbacks", "vpx.vmprov.FinallyAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.MarkAsTemplateWithRedo", "VpxVmprovMarkAsTemplateWithRedo", "vpx.vmprov.UndoableAction", "vpx.version.version12", None, None)
CreateManagedType("vpx.vmprov.MarkOperationInProgress", "VpxVmprovMarkOperationInProgress", "vpx.vmprov.FinallyAction", "vpx.version.version12", None, None)
CreateDataType("vpx.vmprov.MobilityContext", "VpxVmprovMobilityContext", "vpx.vmprov.VmContext", "vpx.version.version7", [("dstVmPathName", "string", "vpx.version.version7", F_OPTIONAL), ("dstVm", "vim.VirtualMachine", "vpx.version.version10", F_OPTIONAL), ("dstLocation", "vpx.vmprov.VmLocation", "vpx.version.version7", F_OPTIONAL), ("dstVcReleaseVersion", "long", "vpx.version.stable", F_OPTIONAL), ("dstVcBuild", "long", "vpx.version.stable", F_OPTIONAL), ("negotiatedProtocolVersion", "int", "vpx.version.stable", F_OPTIONAL), ("srcVcCap", "vpx.vmprov.RemoteUtilities.Capabilities", "vpx.version.stable", F_OPTIONAL), ("dstVcCap", "vpx.vmprov.RemoteUtilities.Capabilities", "vpx.version.stable", F_OPTIONAL), ("structuredCbData", "vpx.vmprov.MobilityContext.MobilityCbData", "vpx.version.stable", F_OPTIONAL), ("unstructuredXvcCbData", "vmodl.KeyAnyValue[]", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData", "VpxVmprovMobilityContextMobilityCbData", "vmodl.DynamicData", "vpx.version.stable", [("autoPowerInfo", "vim.host.AutoStartManager.AutoPowerInfo", "vpx.version.stable", F_OPTIONAL), ("permissionsSrc", "vim.AuthorizationManager.Permission[]", "vpx.version.stable", F_OPTIONAL), ("encryptedVMotion", "boolean", "vpx.version.stable", 0), ("deltaMigration", "boolean", "vpx.version.stable", F_OPTIONAL), ("cluster", "vpx.vmprov.MobilityContext.MobilityCbData.ClusterCbData", "vpx.version.stable", F_OPTIONAL), ("resMgr", "vpx.vmprov.MobilityContext.MobilityCbData.ResourceManager", "vpx.version.stable", F_OPTIONAL), ("ocm", "vpx.vmprov.MobilityContext.MobilityCbData.Ocm", "vpx.version.stable", F_OPTIONAL), ("nfc", "vpx.vmprov.MobilityContext.MobilityCbData.Nfc", "vpx.version.stable", F_OPTIONAL), ("pbm", "vpx.vmprov.MobilityContext.MobilityCbData.Pbm", "vpx.version.unstable", F_OPTIONAL), ("event", "vpx.vmprov.MobilityContext.MobilityCbData.Event", "vpx.version.stable", F_OPTIONAL), ("metadata", "vpx.vmprov.MobilityContext.MobilityCbData.Metadata", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.ClusterCbData", "VpxVmprovMobilityContextMobilityCbDataClusterCbData", "vmodl.DynamicData", "vpx.version.stable", [("configEx", "vim.cluster.ConfigSpecEx", "vpx.version.stable", F_OPTIONAL), ("sdrsProvOp", "long", "vpx.version.stable", F_OPTIONAL), ("extraOverhead", "int", "vpx.version.stable", F_OPTIONAL), ("svMotionVmxConfig", "vmodl.KeyAnyValue[]", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.ResourceManager", "VpxVmprovMobilityContextMobilityCbDataResourceManager", "vmodl.DynamicData", "vpx.version.stable", [("resourceConfigSpec", "vim.ResourceConfigSpec", "vpx.version.stable", 0), ("vmSummary", "vim.vm.Summary", "vpx.version.stable", 0)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.Ocm", "VpxVmprovMobilityContextMobilityCbDataOcm", "vmodl.DynamicData", "vpx.version.stable", [("initialized", "boolean", "vpx.version.stable", 0), ("opId", "long", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.Nfc", "VpxVmprovMobilityContextMobilityCbDataNfc", "vmodl.DynamicData", "vpx.version.stable", [("diskTicket", "vim.HostServiceTicket", "vpx.version.stable", F_OPTIONAL), ("srcSuccessLogTicket", "vim.HostServiceTicket", "vpx.version.stable", F_OPTIONAL), ("dstSuccessLogTicket", "vim.HostServiceTicket", "vpx.version.stable", F_OPTIONAL), ("srcFailureLogTicket", "vim.HostServiceTicket", "vpx.version.stable", F_OPTIONAL), ("dstFailureLogTicket", "vim.HostServiceTicket", "vpx.version.stable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.Pbm", "VpxVmprovMobilityContextMobilityCbDataPbm", "vmodl.DynamicData", "vpx.version.unstable", [("profileDetails", "vim.vm.ProfileDetails", "vpx.version.unstable", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.Event", "VpxVmprovMobilityContextMobilityCbDataEvent", "vmodl.DynamicData", "vpx.version.stable", [("xvcDestFolder", "string", "vpx.version.stable", 0), ("xvcDestDc", "string", "vpx.version.stable", 0), ("xvcDestPool", "string", "vpx.version.stable", 0), ("xvcDestHost", "string", "vpx.version.stable", 0), ("xvcDestDs", "string", "vpx.version.stable", 0)])
CreateDataType("vpx.vmprov.MobilityContext.MobilityCbData.Metadata", "VpxVmprovMobilityContextMobilityCbDataMetadata", "vmodl.DynamicData", "vpx.version.stable", [("tagKey", "vim.ManagedEntity[]", "vpx.version.stable", F_OPTIONAL), ("customFieldDefs", "vim.CustomFieldsManager.FieldDef[]", "vpx.version.stable", F_OPTIONAL), ("customFieldValues", "vim.CustomFieldsManager.Value[]", "vpx.version.stable", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.PrepareDestination", "VpxVmprovPrepareDestination", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.PrepareSource", "VpxVmprovPrepareSource", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.PromoteDisks", "VpxVmprovPromoteDisks", "vpx.vmprov.UndoableAction", "vpx.version.unstable", None, None)
CreateManagedType("vpx.vmprov.ReconfigureVm", "VpxVmprovReconfigureVm", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.RegisterDestinationVm", "VpxVmprovRegisterDestinationVm", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.ReloadFromPathContext", "VpxVmprovReloadFromPathContext", "vpx.vmprov.VmContext", "vpx.version.version12", [("dstVmPathName", "string", "vpx.version.version12", 0), ("dstLocation", "vpx.vmprov.VmLocation", "vpx.version.version12", 0), ("isTemplate", "boolean", "vpx.version.version12", 0), ("requiredKey", "vim.encryption.CryptoKeyId[]", "vpx.version.version12", F_OPTIONAL)])
CreateManagedType("vpx.vmprov.ReserveDirectory", "VpxVmprovReserveDirectory", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateDataType("vpx.vmprov.ReserveDirectory.ReservationInfo", "VpxVmprovReserveDirectoryReservationInfo", "vmodl.DynamicData", "vpx.version.version1", [("parentDir", "string", "vpx.version.version1", 0), ("dirBasename", "string", "vpx.version.version1", 0), ("reservedDir", "string", "vpx.version.version1", 0)])
CreateDataType("vpx.vmprov.ReserveDirectory.Output", "VpxVmprovReserveDirectoryOutput", "vpx.vmprov.Action.Output", "vpx.version.version7", [("reservation", "vpx.vmprov.ReserveDirectory.ReservationInfo[]", "vpx.version.version7", 0)])
CreateManagedType("vpx.vmprov.SwitchHostAndPool", "VpxVmprovSwitchHostAndPool", "vpx.vmprov.UndoableAction", "vpx.version.version7", None, None)
CreateManagedType("vpx.vmprov.TrackTasks", "VpxVmprovTrackTasks", "vpx.vmprov.UndoableAction", "vpx.version.version8", None, None)
CreateDataType("vpx.vmprov.TrackTasks.TasksToTrack", "VpxVmprovTrackTasksTasksToTrack", "vpx.vmprov.Action.Output", "vpx.version.version8", [("trackingInfo", "vpx.vmprov.TaskTrackingInfo[]", "vpx.version.version8", 0), ("remoteWorkflow", "vpx.vmprov.Workflow", "vpx.version.version10", F_OPTIONAL), ("remoteLocator", "vim.ServiceLocator", "vpx.version.version10", F_OPTIONAL)])
CreateDataType("vpx.vmcheck.CheckCloneContext", "VpxVmcheckCheckCloneContext", "vpx.vmcheck.CheckProvisionContext", "vpx.version.version10", [("cloneSpec", "vim.vm.CloneSpec", "vpx.version.version10", 0)])
CreateDataType("vpx.vmprov.CloneBaseContext", "VpxVmprovCloneBaseContext", "vpx.vmprov.MobilityContext", "vpx.version.version11", [("name", "string", "vpx.version.version11", 0), ("folder", "vim.Folder", "vpx.version.version11", F_OPTIONAL), ("macAssignmentData", "string[]", "vpx.version.version11", F_OPTIONAL)])
CreateDataType("vpx.vmprov.CloneContext", "VpxVmprovCloneContext", "vpx.vmprov.CloneBaseContext", "vpx.version.version11", [("spec", "vim.vm.CloneSpec", "vpx.version.version11", 0), ("sanitizedName", "string", "vpx.version.version11", F_OPTIONAL), ("tempSnapshotName", "string", "vpx.version.version11", F_OPTIONAL), ("checkpointFileName", "string", "vpx.version.version11", F_OPTIONAL), ("vAppClone", "boolean", "vpx.version.version11", F_OPTIONAL)])
CreateDataType("vpx.vmprov.InstantCloneContext", "VpxVmprovInstantCloneContext", "vpx.vmprov.MobilityContext", "vpx.version.version12", [("name", "string", "vpx.version.version12", 0), ("spec", "vim.vm.InstantCloneSpec", "vpx.version.version12", 0), ("migrationId", "long", "vpx.version.version12", 0), ("macAssignmentData", "string[]", "vpx.version.version12", F_OPTIONAL)])
CreateDataType("vpx.vmprov.MigrateContext", "VpxVmprovMigrateContext", "vpx.vmprov.MobilityContext", "vpx.version.version7", [("spec", "vim.vm.RelocateSpec", "vpx.version.version7", 0), ("priority", "vim.VirtualMachine.MovePriority", "vpx.version.version7", 0), ("drmRecommended", "boolean", "vpx.version.version7", 0), ("migrationId", "long", "vpx.version.version7", 0), ("changeDiskDatastore", "boolean", "vpx.version.version7", F_OPTIONAL), ("startTime", "vmodl.DateTime", "vpx.version.version7", F_OPTIONAL), ("dstResult", "vim.host.VMotionManager.VMotionResult", "vpx.version.version7", F_OPTIONAL), ("srcResult", "vim.host.VMotionManager.SrcVMotionResult", "vpx.version.version7", F_OPTIONAL), ("numVMotionDisks", "int", "vpx.version.version7", F_OPTIONAL), ("promoteDisks", "boolean", "vpx.version.version12", F_OPTIONAL)])
CreateDataType("vpx.vmprov.FtSyncContext", "VpxVmprovFtSyncContext", "vpx.vmprov.MigrateContext", "vpx.version.version7", [("dstCfgFile", "string", "vpx.version.version7", 0)])
