# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******
from .VmomiSupport import CreateDataType, CreateManagedType
from .VmomiSupport import CreateEnumType
from .VmomiSupport import AddVersion, AddVersionParent
from .VmomiSupport import AddBreakingChangesInfo
from .VmomiSupport import F_LINK, F_LINKABLE
from .VmomiSupport import F_OPTIONAL, F_SECRET
from .VmomiSupport import newestVersions, stableVersions
from .VmomiSupport import publicVersions, dottedVersions
from .VmomiSupport import oldestVersions

AddVersion("vim.version.version10", "vim25", "6.0", 0, "vim25")
AddVersion("vim.version.version11", "vim25", "6.5", 0, "vim25")
AddVersion("vim.version.version12", "vim25", "6.7", 0, "vim25")
AddVersion("vmodl.query.version.version1", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version3", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version4", "", "", 0, "vim25")
AddVersion("vmodl.reflect.version.version2", "reflect", "2.0", 0, "reflect")
AddVersion("vmodl.reflect.version.version1", "reflect", "1.0", 0, "reflect")
AddVersion("vim.version.legacy", "vim25", "legacy", 0, "vim25")
AddVersion("vim.version.m5", "vim25", "m5", 0, "vim25")
AddVersion("vim.version.version13", "vim25", "6.7.1", 0, "vim25")
AddVersion("vim.version.unstable", "vim25", "uE8850", 0, "vim25")
AddVersion("vim.version.version1", "vim2", "2.0", 0, "vim25")
AddVersion("vim.version.version2", "vim25", "2.5", 0, "vim25")
AddVersion("vim.version.version3", "vim25", "2.5u2", 1, "vim25")
AddVersion("vim.version.version4", "vim25", "2.5u2server", 0, "vim25")
AddVersion("vim.version.version5", "vim25", "4.0", 0, "vim25")
AddVersion("vim.version.version6", "vim25", "4.1", 0, "vim25")
AddVersion("vim.version.version7", "vim25", "5.0", 0, "vim25")
AddVersion("vim.version.version8", "vim25", "5.1", 0, "vim25")
AddVersion("vim.version.version9", "vim25", "5.5", 0, "vim25")
AddVersion("vmodl.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.version.version1", "", "", 0, "vim25")
AddVersion("vim.version.stable", "vim25", "sEC3C4", 0, "vim25")
AddVersion("vmodl.version.version0", "", "", 0, "vim25")
AddVersionParent("vim.version.version10", "vim.version.version10")
AddVersionParent("vim.version.version10", "vmodl.query.version.version1")
AddVersionParent("vim.version.version10", "vmodl.query.version.version2")
AddVersionParent("vim.version.version10", "vmodl.query.version.version3")
AddVersionParent("vim.version.version10", "vmodl.query.version.version4")
AddVersionParent("vim.version.version10", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version10", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version10", "vim.version.version1")
AddVersionParent("vim.version.version10", "vim.version.version2")
AddVersionParent("vim.version.version10", "vim.version.version3")
AddVersionParent("vim.version.version10", "vim.version.version4")
AddVersionParent("vim.version.version10", "vim.version.version5")
AddVersionParent("vim.version.version10", "vim.version.version6")
AddVersionParent("vim.version.version10", "vim.version.version7")
AddVersionParent("vim.version.version10", "vim.version.version8")
AddVersionParent("vim.version.version10", "vim.version.version9")
AddVersionParent("vim.version.version10", "vmodl.version.version2")
AddVersionParent("vim.version.version10", "vmodl.version.version1")
AddVersionParent("vim.version.version10", "vmodl.version.version0")
AddVersionParent("vim.version.version11", "vim.version.version10")
AddVersionParent("vim.version.version11", "vim.version.version11")
AddVersionParent("vim.version.version11", "vmodl.query.version.version1")
AddVersionParent("vim.version.version11", "vmodl.query.version.version2")
AddVersionParent("vim.version.version11", "vmodl.query.version.version3")
AddVersionParent("vim.version.version11", "vmodl.query.version.version4")
AddVersionParent("vim.version.version11", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version11", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version11", "vim.version.version1")
AddVersionParent("vim.version.version11", "vim.version.version2")
AddVersionParent("vim.version.version11", "vim.version.version3")
AddVersionParent("vim.version.version11", "vim.version.version4")
AddVersionParent("vim.version.version11", "vim.version.version5")
AddVersionParent("vim.version.version11", "vim.version.version6")
AddVersionParent("vim.version.version11", "vim.version.version7")
AddVersionParent("vim.version.version11", "vim.version.version8")
AddVersionParent("vim.version.version11", "vim.version.version9")
AddVersionParent("vim.version.version11", "vmodl.version.version2")
AddVersionParent("vim.version.version11", "vmodl.version.version1")
AddVersionParent("vim.version.version11", "vmodl.version.version0")
AddVersionParent("vim.version.version12", "vim.version.version10")
AddVersionParent("vim.version.version12", "vim.version.version11")
AddVersionParent("vim.version.version12", "vim.version.version12")
AddVersionParent("vim.version.version12", "vmodl.query.version.version1")
AddVersionParent("vim.version.version12", "vmodl.query.version.version2")
AddVersionParent("vim.version.version12", "vmodl.query.version.version3")
AddVersionParent("vim.version.version12", "vmodl.query.version.version4")
AddVersionParent("vim.version.version12", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version12", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version12", "vim.version.version1")
AddVersionParent("vim.version.version12", "vim.version.version2")
AddVersionParent("vim.version.version12", "vim.version.version3")
AddVersionParent("vim.version.version12", "vim.version.version4")
AddVersionParent("vim.version.version12", "vim.version.version5")
AddVersionParent("vim.version.version12", "vim.version.version6")
AddVersionParent("vim.version.version12", "vim.version.version7")
AddVersionParent("vim.version.version12", "vim.version.version8")
AddVersionParent("vim.version.version12", "vim.version.version9")
AddVersionParent("vim.version.version12", "vmodl.version.version2")
AddVersionParent("vim.version.version12", "vmodl.version.version1")
AddVersionParent("vim.version.version12", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version1", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version4")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version0")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.reflect.version.version2")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.reflect.version.version1")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.legacy", "vim.version.version10")
AddVersionParent("vim.version.legacy", "vim.version.version11")
AddVersionParent("vim.version.legacy", "vim.version.version12")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version1")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version2")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version3")
AddVersionParent("vim.version.legacy", "vmodl.query.version.version4")
AddVersionParent("vim.version.legacy", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.legacy", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.legacy", "vim.version.legacy")
AddVersionParent("vim.version.legacy", "vim.version.m5")
AddVersionParent("vim.version.legacy", "vim.version.version13")
AddVersionParent("vim.version.legacy", "vim.version.unstable")
AddVersionParent("vim.version.legacy", "vim.version.version1")
AddVersionParent("vim.version.legacy", "vim.version.version2")
AddVersionParent("vim.version.legacy", "vim.version.version3")
AddVersionParent("vim.version.legacy", "vim.version.version4")
AddVersionParent("vim.version.legacy", "vim.version.version5")
AddVersionParent("vim.version.legacy", "vim.version.version6")
AddVersionParent("vim.version.legacy", "vim.version.version7")
AddVersionParent("vim.version.legacy", "vim.version.version8")
AddVersionParent("vim.version.legacy", "vim.version.version9")
AddVersionParent("vim.version.legacy", "vmodl.version.version2")
AddVersionParent("vim.version.legacy", "vmodl.version.version1")
AddVersionParent("vim.version.legacy", "vim.version.stable")
AddVersionParent("vim.version.legacy", "vmodl.version.version0")
AddVersionParent("vim.version.m5", "vim.version.version10")
AddVersionParent("vim.version.m5", "vim.version.version11")
AddVersionParent("vim.version.m5", "vim.version.version12")
AddVersionParent("vim.version.m5", "vmodl.query.version.version1")
AddVersionParent("vim.version.m5", "vmodl.query.version.version2")
AddVersionParent("vim.version.m5", "vmodl.query.version.version3")
AddVersionParent("vim.version.m5", "vmodl.query.version.version4")
AddVersionParent("vim.version.m5", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.m5", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.m5", "vim.version.m5")
AddVersionParent("vim.version.m5", "vim.version.version13")
AddVersionParent("vim.version.m5", "vim.version.version1")
AddVersionParent("vim.version.m5", "vim.version.version2")
AddVersionParent("vim.version.m5", "vim.version.version3")
AddVersionParent("vim.version.m5", "vim.version.version4")
AddVersionParent("vim.version.m5", "vim.version.version5")
AddVersionParent("vim.version.m5", "vim.version.version6")
AddVersionParent("vim.version.m5", "vim.version.version7")
AddVersionParent("vim.version.m5", "vim.version.version8")
AddVersionParent("vim.version.m5", "vim.version.version9")
AddVersionParent("vim.version.m5", "vmodl.version.version2")
AddVersionParent("vim.version.m5", "vmodl.version.version1")
AddVersionParent("vim.version.m5", "vmodl.version.version0")
AddVersionParent("vim.version.version13", "vim.version.version10")
AddVersionParent("vim.version.version13", "vim.version.version11")
AddVersionParent("vim.version.version13", "vim.version.version12")
AddVersionParent("vim.version.version13", "vmodl.query.version.version1")
AddVersionParent("vim.version.version13", "vmodl.query.version.version2")
AddVersionParent("vim.version.version13", "vmodl.query.version.version3")
AddVersionParent("vim.version.version13", "vmodl.query.version.version4")
AddVersionParent("vim.version.version13", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.version13", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version13", "vim.version.version13")
AddVersionParent("vim.version.version13", "vim.version.version1")
AddVersionParent("vim.version.version13", "vim.version.version2")
AddVersionParent("vim.version.version13", "vim.version.version3")
AddVersionParent("vim.version.version13", "vim.version.version4")
AddVersionParent("vim.version.version13", "vim.version.version5")
AddVersionParent("vim.version.version13", "vim.version.version6")
AddVersionParent("vim.version.version13", "vim.version.version7")
AddVersionParent("vim.version.version13", "vim.version.version8")
AddVersionParent("vim.version.version13", "vim.version.version9")
AddVersionParent("vim.version.version13", "vmodl.version.version2")
AddVersionParent("vim.version.version13", "vmodl.version.version1")
AddVersionParent("vim.version.version13", "vmodl.version.version0")
AddVersionParent("vim.version.unstable", "vim.version.version10")
AddVersionParent("vim.version.unstable", "vim.version.version11")
AddVersionParent("vim.version.unstable", "vim.version.version12")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version1")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version2")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version3")
AddVersionParent("vim.version.unstable", "vmodl.query.version.version4")
AddVersionParent("vim.version.unstable", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.unstable", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.unstable", "vim.version.m5")
AddVersionParent("vim.version.unstable", "vim.version.version13")
AddVersionParent("vim.version.unstable", "vim.version.unstable")
AddVersionParent("vim.version.unstable", "vim.version.version1")
AddVersionParent("vim.version.unstable", "vim.version.version2")
AddVersionParent("vim.version.unstable", "vim.version.version3")
AddVersionParent("vim.version.unstable", "vim.version.version4")
AddVersionParent("vim.version.unstable", "vim.version.version5")
AddVersionParent("vim.version.unstable", "vim.version.version6")
AddVersionParent("vim.version.unstable", "vim.version.version7")
AddVersionParent("vim.version.unstable", "vim.version.version8")
AddVersionParent("vim.version.unstable", "vim.version.version9")
AddVersionParent("vim.version.unstable", "vmodl.version.version2")
AddVersionParent("vim.version.unstable", "vmodl.version.version1")
AddVersionParent("vim.version.unstable", "vim.version.stable")
AddVersionParent("vim.version.unstable", "vmodl.version.version0")
AddVersionParent("vim.version.version1", "vmodl.query.version.version1")
AddVersionParent("vim.version.version1", "vim.version.version1")
AddVersionParent("vim.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version2", "vmodl.query.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version2")
AddVersionParent("vim.version.version2", "vmodl.version.version0")
AddVersionParent("vim.version.version3", "vmodl.query.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version2")
AddVersionParent("vim.version.version3", "vim.version.version3")
AddVersionParent("vim.version.version3", "vmodl.version.version0")
AddVersionParent("vim.version.version4", "vmodl.query.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version2")
AddVersionParent("vim.version.version4", "vim.version.version3")
AddVersionParent("vim.version.version4", "vim.version.version4")
AddVersionParent("vim.version.version4", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.query.version.version1")
AddVersionParent("vim.version.version5", "vmodl.query.version.version2")
AddVersionParent("vim.version.version5", "vim.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version2")
AddVersionParent("vim.version.version5", "vim.version.version3")
AddVersionParent("vim.version.version5", "vim.version.version4")
AddVersionParent("vim.version.version5", "vim.version.version5")
AddVersionParent("vim.version.version5", "vmodl.version.version1")
AddVersionParent("vim.version.version5", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.query.version.version1")
AddVersionParent("vim.version.version6", "vmodl.query.version.version2")
AddVersionParent("vim.version.version6", "vmodl.query.version.version3")
AddVersionParent("vim.version.version6", "vim.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version2")
AddVersionParent("vim.version.version6", "vim.version.version3")
AddVersionParent("vim.version.version6", "vim.version.version4")
AddVersionParent("vim.version.version6", "vim.version.version5")
AddVersionParent("vim.version.version6", "vim.version.version6")
AddVersionParent("vim.version.version6", "vmodl.version.version1")
AddVersionParent("vim.version.version6", "vmodl.version.version0")
AddVersionParent("vim.version.version7", "vmodl.query.version.version1")
AddVersionParent("vim.version.version7", "vmodl.query.version.version2")
AddVersionParent("vim.version.version7", "vmodl.query.version.version3")
AddVersionParent("vim.version.version7", "vmodl.query.version.version4")
AddVersionParent("vim.version.version7", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version2")
AddVersionParent("vim.version.version7", "vim.version.version3")
AddVersionParent("vim.version.version7", "vim.version.version4")
AddVersionParent("vim.version.version7", "vim.version.version5")
AddVersionParent("vim.version.version7", "vim.version.version6")
AddVersionParent("vim.version.version7", "vim.version.version7")
AddVersionParent("vim.version.version7", "vmodl.version.version2")
AddVersionParent("vim.version.version7", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.version.version0")
AddVersionParent("vim.version.version8", "vmodl.query.version.version1")
AddVersionParent("vim.version.version8", "vmodl.query.version.version2")
AddVersionParent("vim.version.version8", "vmodl.query.version.version3")
AddVersionParent("vim.version.version8", "vmodl.query.version.version4")
AddVersionParent("vim.version.version8", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version8", "vim.version.version1")
AddVersionParent("vim.version.version8", "vim.version.version2")
AddVersionParent("vim.version.version8", "vim.version.version3")
AddVersionParent("vim.version.version8", "vim.version.version4")
AddVersionParent("vim.version.version8", "vim.version.version5")
AddVersionParent("vim.version.version8", "vim.version.version6")
AddVersionParent("vim.version.version8", "vim.version.version7")
AddVersionParent("vim.version.version8", "vim.version.version8")
AddVersionParent("vim.version.version8", "vmodl.version.version2")
AddVersionParent("vim.version.version8", "vmodl.version.version1")
AddVersionParent("vim.version.version8", "vmodl.version.version0")
AddVersionParent("vim.version.version9", "vmodl.query.version.version1")
AddVersionParent("vim.version.version9", "vmodl.query.version.version2")
AddVersionParent("vim.version.version9", "vmodl.query.version.version3")
AddVersionParent("vim.version.version9", "vmodl.query.version.version4")
AddVersionParent("vim.version.version9", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version9", "vim.version.version1")
AddVersionParent("vim.version.version9", "vim.version.version2")
AddVersionParent("vim.version.version9", "vim.version.version3")
AddVersionParent("vim.version.version9", "vim.version.version4")
AddVersionParent("vim.version.version9", "vim.version.version5")
AddVersionParent("vim.version.version9", "vim.version.version6")
AddVersionParent("vim.version.version9", "vim.version.version7")
AddVersionParent("vim.version.version9", "vim.version.version8")
AddVersionParent("vim.version.version9", "vim.version.version9")
AddVersionParent("vim.version.version9", "vmodl.version.version2")
AddVersionParent("vim.version.version9", "vmodl.version.version1")
AddVersionParent("vim.version.version9", "vmodl.version.version0")
AddVersionParent("vmodl.version.version2", "vmodl.version.version2")
AddVersionParent("vmodl.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.stable", "vim.version.version10")
AddVersionParent("vim.version.stable", "vim.version.version11")
AddVersionParent("vim.version.stable", "vim.version.version12")
AddVersionParent("vim.version.stable", "vmodl.query.version.version1")
AddVersionParent("vim.version.stable", "vmodl.query.version.version2")
AddVersionParent("vim.version.stable", "vmodl.query.version.version3")
AddVersionParent("vim.version.stable", "vmodl.query.version.version4")
AddVersionParent("vim.version.stable", "vmodl.reflect.version.version2")
AddVersionParent("vim.version.stable", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.stable", "vim.version.m5")
AddVersionParent("vim.version.stable", "vim.version.version13")
AddVersionParent("vim.version.stable", "vim.version.version1")
AddVersionParent("vim.version.stable", "vim.version.version2")
AddVersionParent("vim.version.stable", "vim.version.version3")
AddVersionParent("vim.version.stable", "vim.version.version4")
AddVersionParent("vim.version.stable", "vim.version.version5")
AddVersionParent("vim.version.stable", "vim.version.version6")
AddVersionParent("vim.version.stable", "vim.version.version7")
AddVersionParent("vim.version.stable", "vim.version.version8")
AddVersionParent("vim.version.stable", "vim.version.version9")
AddVersionParent("vim.version.stable", "vmodl.version.version2")
AddVersionParent("vim.version.stable", "vmodl.version.version1")
AddVersionParent("vim.version.stable", "vim.version.stable")
AddVersionParent("vim.version.stable", "vmodl.version.version0")
AddVersionParent("vmodl.version.version0", "vmodl.version.version0")

CreateDataType("hostd.DVPortgroupInfo", "HostdDVPortgroupInfo", "vmodl.DynamicData", "vim.version.version8", [("portgroupKey", "string", "vim.version.version8", 0), ("dvsUuid", "string", "vim.version.version8", 0), ("name", "string", "vim.version.version8", 0), ("numPorts", "int", "vim.version.version8", F_OPTIONAL), ("type", "string", "vim.version.version8", 0), ("policy", "vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "vim.version.version8", F_OPTIONAL), ("defaultPortConfig", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version8", F_OPTIONAL), ("uplinkPortgroup", "boolean", "vim.version.version8", 0), ("keyedOpaqueDataList", "vim.dvs.KeyedOpaqueData.KeyedOpaqueDataList", "vim.version.version8", F_OPTIONAL), ("opaqueDataList", "vim.dvs.OpaqueData.OpaqueDataList", "vim.version.version8", F_OPTIONAL)])
CreateManagedType("hostd.DebugManager", "HostdDebugManager", "vmodl.ManagedObject", "vim.version.version1", None, [("redirectStdoutToFile", "RedirectStdoutToFile", "vim.version.version1", (("filePath", "string", "vim.version.version1", 0, None),("redirectStderr", "boolean", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("redirectStderrToFile", "RedirectStderrToFile", "vim.version.version1", (("filePath", "string", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("throwException", "ThrowException", "vim.version.version1", (("message", "string", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("clobberAddress", "ClobberAddress", "vim.version.version1", (("addr", "long", "vim.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, None), ("useTooManyFds", "UseTooManyFds", "vim.version.version1", (("numFds", "int", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("coldQuit", "ColdQuit", "vim.version.version1", (), (0, "void", "void"), None, None), ("updateDispatcherOption", "UpdateDispatcherOption", "vim.version.version1", (("option", "vim.option.OptionValue", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("forceDiskPathSanityCheck", "ForceDiskPathSanityCheck", "vim.version.version1", (), (0, "void", "void"), None, None), ("injectDiskLayoutError", "InjectDiskLayoutError", "vim.version.version1", (("set", "boolean", "vim.version.version1", 0, None),("value", "boolean", "vim.version.version1", 0, None),), (0, "boolean", "boolean"), None, None), ("testRealpathError", "TestRealpathError", "vim.version.version1", (("enable", "boolean", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("simulateInaccessibleStorage", "SimulateInaccessibleStorage", "vim.version.version1", (("enable", "boolean", "vim.version.version1", F_OPTIONAL, None),), (0, "boolean", "boolean"), None, None), ("injectRemoveResourceEntryError", "InjectRemoveResourceEntryError", "vim.version.version1", (("set", "boolean", "vim.version.version1", 0, None),("value", "boolean", "vim.version.version1", 0, None),), (0, "boolean", "boolean"), None, None), ("setMaxRegisteredVmsLimit", "SetMaxRegisteredVmsLimit", "vim.version.version1", (("newMaxVMLimit", "int", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("getMaxRegisteredVmsLimit", "GetMaxRegisteredVmsLimit", "vim.version.version1", (), (0, "int", "int"), None, None), ("injectProductLockerError", "InjectProductLockerError", "vim.version.version1", (("errorId", "string", "vim.version.version1", 0, None),("set", "boolean", "vim.version.version1", 0, None),("value", "boolean", "vim.version.version1", 0, None),), (0, "boolean", "boolean"), None, None), ("getRegisteredManagedObjects", "GetRegisteredManagedObjects", "vim.version.version1", (), (0, "vmodl.ManagedObject[]", "vmodl.ManagedObject[]"), None, None), ("GetPreferenceOption", "GetPreferenceOption", "vim.version.version1", (("prefKey", "string", "vim.version.version1", 0, None),), (F_OPTIONAL, "string", "string"), None, None), ("SetPreferenceOption", "SetPreferenceOption", "vim.version.version1", (("prefKey", "string", "vim.version.version1", 0, None),("value", "string", "vim.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateManagedType("hostd.HbrInternalSystem", "HostdHbrInternalSystem", "vmodl.ManagedObject", "vim.version.version7", None, [("abortVmInstance", "HbrAbortVmInstance", "vim.version.version7", (("vm", "vim.VirtualMachine", "vim.version.version7", 0, "VirtualMachine.Hbr.ReplicaManagement"),), (0, "void", "void"), "Host.Hbr.HbrManagement", ["vim.fault.ReplicationVmFault", ]), ("getGroupState", "HbrGetGroupState", "vim.version.version7", (("vm", "vim.VirtualMachine", "vim.version.version7", 0, "VirtualMachine.Hbr.ReplicaManagement"),), (0, "string", "string"), "Host.Hbr.HbrManagement", ["vim.fault.ReplicationVmFault", ])])
CreateManagedType("hostd.HostsvcManager", "HostdHostsvcManager", "vmodl.ManagedObject", "vim.version.version1", None, [("refreshDatastores", "RefreshDatastores", "vim.version.version1", (), (0, "void", "void"), None, None), ("refreshVsanDatastore", "RefreshVsanDatastore", "vim.version.version1", (("vsanProperty", "anyType", "vim.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, None), ("refreshPhysicalNic", "RefreshPhysicalNic", "vim.version.version1", (("id", "string", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("refreshDefaultGateway", "RefreshDefaultGateway", "vim.version.version1", (), (0, "void", "void"), None, None), ("refreshServiceConsoleNic", "RefreshServiceConsoleNic", "vim.version.version1", (), (0, "void", "void"), None, None), ("refreshNetworkConfig", "RefreshNetworkConfig", "vim.version.version1", (), (0, "void", "void"), None, None), ("updateVsanProperty", "UpdateVsanProperty", "vim.version.version1", (("propertyPath", "string", "vim.version.version1", 0, None),("property", "anyType", "vim.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, None)])
CreateManagedType("hostd.LogsvcManager", "HostdLogsvcManager", "vmodl.ManagedObject", "vim.version.version1", None, [("setLogLevel", "SetLogLevel", "vim.version.version1", (("name", "string", "vim.version.version1", 0, None),("level", "string", "vim.version.version1", 0, None),("prefix", "boolean", "vim.version.version1", 0, None),), (0, "void", "void"), None, None), ("getLoggers", "GetLoggers", "vim.version.version1", (("prefix", "string", "vim.version.version1", 0, None),), (F_OPTIONAL, "hostd.LogsvcManager.LogInfo[]", "hostd.LogsvcManager.LogInfo[]"), None, None)])
CreateDataType("hostd.LogsvcManager.LogInfo", "HostdLogsvcManagerLogInfo", "vmodl.DynamicData", "vim.version.version1", [("name", "string", "vim.version.version1", 0), ("logLevel", "string", "vim.version.version1", 0)])
CreateManagedType("hostd.PerfCounterManager", "HostdPerfCounterManager", "vmodl.ManagedObject", "vim.version.version1", [("registry", "hostd.perfCounter.Registry", "vim.version.version1", 0, None)], [("queryScoreboard", "QueryScoreboard", "vim.version.version1", (), (0, "string", "string"), None, None)])
CreateManagedType("hostd.ServiceInstance", "HostdServiceInstance", "vmodl.ManagedObject", "vim.version.version1", [("debugManager", "hostd.DebugManager", "vim.version.version1", 0, None), ("hostsvcManager", "hostd.HostsvcManager", "vim.version.version1", 0, None), ("perfCounterManager", "hostd.PerfCounterManager", "vim.version.version1", 0, None), ("logsvcManager", "hostd.LogsvcManager", "vim.version.version1", 0, None), ("vprobesManager", "hostd.VprobesManager", "vim.version.version7", 0, None)], [("refresh", "HostdServiceInstance_Refresh", "vim.version.version1", (("name", "string", "vim.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, None), ("shutdown", "Shutdown", "vim.version.version1", (), (0, "void", "void"), None, None)])
CreateManagedType("hostd.VprobesManager", "HostdVprobesManager", "vmodl.ManagedObject", "vim.version.version1", None, [("resetVprobes", "resetVmDomainVprobes_Task", "vim.version.version1", (("vm", "vim.VirtualMachine", "vim.version.version1", 0, None),("instanceId", "string", "vim.version.version1", 0, None),), (0, "vim.Task", "void"), "Global.VCServer", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.NotFound", ]), ("loadVprobes", "loadVmDomainVprobes_Task", "vim.version.version1", (("vm", "vim.VirtualMachine", "vim.version.version1", 0, None),("script", "string", "vim.version.version1", 0, None),), (0, "vim.Task", "string"), "Global.VCServer", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.NotFound", ]), ("listVprobesStaticProbes", "listVmDomainVprobes_Task", "vim.version.version1", (("vm", "vim.VirtualMachine", "vim.version.version1", 0, None),), (0, "vim.Task", "string"), "Global.VCServer", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.NotFound", ]), ("listVprobesGlobals", "listVmDomainVprobesGlobals_Task", "vim.version.version1", (("vm", "vim.VirtualMachine", "vim.version.version1", 0, None),), (0, "vim.Task", "string"), "Global.VCServer", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.NotFound", ]), ("getVprobesVersion", "getVmDomainVprobesVersion_Task", "vim.version.version1", (("vm", "vim.VirtualMachine", "vim.version.version1", 0, None),), (0, "vim.Task", "string"), "Global.VCServer", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.NotFound", ])])
CreateDataType("hostd.host.FileSystemBackingInfo", "HostdHostFileSystemBackingInfo", "vmodl.DynamicData", "vim.version.version1", [("id", "string", "vim.version.version1", 0), ("name", "string", "vim.version.version1", 0), ("path", "string", "vim.version.version1", 0), ("capacity", "long", "vim.version.version1", 0), ("freeSpace", "long", "vim.version.version1", 0), ("type", "string", "vim.version.version1", 0), ("accessible", "boolean", "vim.version.version1", 0), ("mounted", "boolean", "vim.version.version1", 0)])
CreateEnumType("hostd.host.FileSystemBackingInfo.FileSystemType", "HostdHostFileSystemBackingInfoFileSystemType", "vim.version.version1", ["local", "nfs", "cifs", "nfsv41"])
CreateDataType("hostd.host.FileSystemVolume", "HostdHostFileSystemVolume", "vmodl.DynamicData", "vim.version.version1", [("accessMode", "string", "vim.version.version1", 0), ("type", "string", "vim.version.version1", 0), ("otherType", "string", "vim.version.version1", F_OPTIONAL), ("path", "string", "vim.version.version1", 0), ("pathAlias", "string[]", "vim.version.version1", 0), ("id", "string", "vim.version.version1", 0), ("name", "string", "vim.version.version1", 0), ("capacity", "long", "vim.version.version1", F_OPTIONAL), ("available", "long", "vim.version.version1", F_OPTIONAL), ("lastRefresh", "vmodl.DateTime", "vim.version.version1", 0), ("accessible", "boolean", "vim.version.version1", 0), ("inaccessibleReason", "string", "vim.version.version1", F_OPTIONAL), ("mounted", "boolean", "vim.version.version1", 0), ("vStorageSupport", "string", "vim.version.version1", F_OPTIONAL), ("nativeCloneCapable", "boolean", "vim.version.version1", F_OPTIONAL), ("containerId", "string", "vim.version.version13", F_OPTIONAL), ("aliasOf", "string", "vim.version.version13", F_OPTIONAL)])
CreateEnumType("hostd.host.FileSystemVolume.AccessMode", "HostdHostFileSystemVolumeAccessMode", "vim.version.version1", ["readWrite", "readOnly"])
CreateDataType("hostd.host.FileSystemVolumeInfo", "HostdHostFileSystemVolumeInfo", "vmodl.DynamicData", "vim.version.version1", [("volumeTypes", "string[]", "vim.version.version1", F_OPTIONAL), ("volume", "hostd.host.FileSystemVolume[]", "vim.version.version1", F_OPTIONAL)])
CreateDataType("hostd.host.LocalDatastoreEntry", "HostdHostLocalDatastoreEntry", "vmodl.DynamicData", "vim.version.version1", [("name", "string", "vim.version.version1", 0), ("path", "string", "vim.version.version1", 0), ("id", "string", "vim.version.version1", F_OPTIONAL)])
CreateDataType("hostd.host.LocalFileSystemVolume", "HostdHostLocalFileSystemVolume", "hostd.host.FileSystemVolume", "vim.version.version1", [("device", "string", "vim.version.version1", 0)])
CreateDataType("hostd.host.NasDatastoreEntry", "HostdHostNasDatastoreEntry", "vmodl.DynamicData", "vim.version.version1", [("name", "string", "vim.version.version1", 0), ("path", "string", "vim.version.version1", 0), ("type", "string", "vim.version.version1", 0), ("remoteHost", "string", "vim.version.version1", 0), ("remotePath", "string", "vim.version.version1", 0), ("id", "string", "vim.version.version1", F_OPTIONAL), ("userName", "string", "vim.version.version1", F_OPTIONAL), ("remoteHostNames", "string[]", "vim.version.legacy", F_OPTIONAL)])
CreateDataType("hostd.host.NasVolume", "HostdHostNasVolume", "hostd.host.FileSystemVolume", "vim.version.version1", [("remoteHost", "string", "vim.version.version1", 0), ("remotePath", "string", "vim.version.version1", 0), ("remoteHostNames", "string[]", "vim.version.legacy", F_OPTIONAL), ("securityType", "string", "vim.version.version10", F_OPTIONAL), ("protocolEndpoint", "boolean", "vim.version.version10", F_OPTIONAL)])
CreateDataType("hostd.host.NasVolumeInfo", "HostdHostNasVolumeInfo", "hostd.host.FileSystemBackingInfo", "vim.version.version1", [("accessMode", "string", "vim.version.version1", 0), ("remoteHost", "string", "vim.version.version1", 0), ("remotePath", "string", "vim.version.version1", 0), ("userName", "string", "vim.version.version1", F_OPTIONAL), ("password", "string", "vim.version.version1", F_OPTIONAL), ("remoteHostNames", "string[]", "vim.version.legacy", F_OPTIONAL)])
CreateEnumType("hostd.host.NasVolumeInfo.AccessMode", "HostdHostNasVolumeInfoAccessMode", "vim.version.version1", ["readWrite", "readOnly"])
CreateDataType("hostd.host.PMemVolume", "HostdHostPMemVolume", "hostd.host.FileSystemVolume", "vim.version.version12", [("version", "string", "vim.version.version12", 0)])
CreateDataType("hostd.host.VfatVolume", "HostdHostVfatVolume", "hostd.host.FileSystemVolume", "vim.version.version1", None)
CreateDataType("hostd.host.Vffs", "HostdHostVffs", "hostd.host.FileSystemVolume", "vim.version.version9", [("majorVersion", "int", "vim.version.version9", 0), ("version", "string", "vim.version.version9", 0), ("uuid", "string", "vim.version.version9", 0), ("extent", "vim.host.ScsiDisk.Partition[]", "vim.version.version9", 0)])
CreateDataType("hostd.host.Vmfs", "HostdHostVmfs", "hostd.host.FileSystemVolume", "vim.version.version1", [("blockSize", "int", "vim.version.version1", 0), ("maxBlocks", "int", "vim.version.version1", 0), ("majorVersion", "int", "vim.version.version1", 0), ("version", "string", "vim.version.version1", 0), ("uuid", "string", "vim.version.version1", 0), ("extent", "vim.host.ScsiDisk.Partition[]", "vim.version.version1", 0), ("forceMountedInfo", "vim.host.ForceMountedInfo", "vim.version.version5", F_OPTIONAL), ("ssd", "boolean", "vim.version.version1", F_OPTIONAL), ("local", "boolean", "vim.version.version9", F_OPTIONAL), ("unmapGranularity", "int", "vim.version.version12", F_OPTIONAL), ("unmapPriority", "string", "vim.version.version12", F_OPTIONAL), ("unmapBandwidthSpec", "vim.host.VmfsVolume.UnmapBandwidthSpec", "vim.version.version12", F_OPTIONAL)])
CreateDataType("hostd.host.VvolContainer", "HostdHostVvolContainer", "hostd.host.FileSystemVolume", "vim.version.legacy", [("uuid", "string", "vim.version.legacy", 0), ("hostPE", "vim.host.VvolVolume.HostProtocolEndpoint[]", "vim.version.legacy", F_OPTIONAL), ("vasaProviderInfo", "vim.VimVasaProviderInfo[]", "vim.version.legacy", F_OPTIONAL), ("storageArray", "vim.VasaStorageArray[]", "vim.version.legacy", F_OPTIONAL), ("consolePath", "string", "vim.version.legacy", 0)])
CreateDataType("hostd.mockup.StatsAugmentationPolicy", "HostdMockupStatsAugmentationPolicy", "vmodl.DynamicData", "vim.version.legacy", [("rule", "hostd.mockup.StatsAugmentationRule[]", "vim.version.legacy", F_OPTIONAL)])
CreateDataType("hostd.mockup.StatsAugmentationRule", "HostdMockupStatsAugmentationRule", "vmodl.DynamicData", "vim.version.legacy", [("pattern", "string", "vim.version.legacy", 0), ("invert", "boolean", "vim.version.legacy", 0), ("spec", "hostd.mockup.StatsAugmentationSpec[]", "vim.version.legacy", F_OPTIONAL)])
CreateDataType("hostd.mockup.StatsAugmentationSpec", "HostdMockupStatsAugmentationSpec", "vmodl.DynamicData", "vim.version.legacy", [("counterId", "int[]", "vim.version.legacy", F_OPTIONAL), ("instance", "string[]", "vim.version.legacy", F_OPTIONAL), ("sequence", "long[]", "vim.version.legacy", F_OPTIONAL)])
CreateEnumType("hostd.perfCounter.CounterType", "HostdPerfCounterCounterType", "vim.version.version1", ["counter64", "gauge64"])
CreateDataType("hostd.perfCounter.Metadata", "HostdPerfCounterMetadata", "vmodl.DynamicData", "vim.version.version1", [("name", "string", "vim.version.version1", 0), ("type", "hostd.perfCounter.CounterType", "vim.version.version1", 0), ("minValue", "long", "vim.version.version1", F_OPTIONAL), ("maxValue", "long", "vim.version.version1", F_OPTIONAL)])
CreateManagedType("hostd.perfCounter.Query", "HostdPerfCounterQuery", "vmodl.ManagedObject", "vim.version.version1", [("info", "hostd.perfCounter.Query.Info", "vim.version.version1", 0, None)], [("execute", "Execute", "vim.version.version1", (), (F_OPTIONAL, "hostd.perfCounter.QueryResult[]", "hostd.perfCounter.QueryResult[]"), None, None), ("destroy", "HostdPerfCounterQuery_Destroy", "vim.version.version1", (), (0, "void", "void"), None, None)])
CreateDataType("hostd.perfCounter.Query.Info", "HostdPerfCounterQueryInfo", "vmodl.DynamicData", "vim.version.version1", None)
CreateDataType("hostd.perfCounter.Query.NamesInfo", "HostdPerfCounterQueryNamesInfo", "hostd.perfCounter.Query.Info", "vim.version.version1", [("names", "string[]", "vim.version.version1", F_OPTIONAL)])
CreateDataType("hostd.perfCounter.Query.RegexInfo", "HostdPerfCounterQueryRegexInfo", "hostd.perfCounter.Query.Info", "vim.version.version1", [("regex", "string", "vim.version.version1", 0), ("caseSensitive", "boolean", "vim.version.version1", 0)])
CreateDataType("hostd.perfCounter.QueryResult", "HostdPerfCounterQueryResult", "vmodl.DynamicData", "vim.version.version1", [("metadata", "hostd.perfCounter.Metadata", "vim.version.version1", 0), ("value", "long", "vim.version.version1", F_OPTIONAL)])
CreateManagedType("hostd.perfCounter.Registry", "HostdPerfCounterRegistry", "vmodl.ManagedObject", "vim.version.version1", [("query", "hostd.perfCounter.Query[]", "vim.version.version1", 0, None)], [("enumeratePath", "EnumeratePath", "vim.version.version1", (("path", "string", "vim.version.version1", 0, None),), (F_OPTIONAL, "string[]", "string[]"), None, None), ("createNamesQuery", "CreateNamesQuery", "vim.version.version1", (("names", "string[]", "vim.version.version1", F_OPTIONAL, None),), (0, "hostd.perfCounter.Query", "hostd.perfCounter.Query"), None, None), ("createRegexQuery", "CreateRegexQuery", "vim.version.version1", (("regex", "string", "vim.version.version1", 0, None),("caseSensitive", "boolean", "vim.version.version1", 0, None),), (0, "hostd.perfCounter.Query", "hostd.perfCounter.Query"), None, None)])
